{
    "sourceFile": "sched_script2.rb",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1747020061394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1747020061394,
            "name": "Commit-0",
            "content": "# --- DATA STRUCTURES ---\r\nStudent = Struct.new(:id, :name)\r\nInstructor = Struct.new(:id, :name)\r\nCourse = Struct.new(:id, :name) # Represents the general subject, e.g., \"CS101\"\r\nClassroom = Struct.new(:id, :name, :capacity)\r\n# Timeslot will just be a string, e.g., \"Mon 09:00-10:00\"\r\n\r\n# This is what we actually try to schedule\r\n# It links a Course, an Instructor, and a list of Students\r\nSubjectOffering = Struct.new(:id, :course, :instructor, :students_enrolled)\r\n\r\nScheduledClass = Struct.new(:offering_id, :course_name, :instructor_name, :student_names, :classroom_name, :timeslot)\r\n\r\nclass TimetableScheduler\r\n  def initialize\r\n    @students = []\r\n    @instructors = []\r\n    @courses = [] # Stores general course definitions\r\n    @classrooms = []\r\n    @timeslots = [] # Array of strings\r\n\r\n    @subject_offerings_to_schedule = [] # What the user sets up to be scheduled\r\n    @final_schedule = []\r\n\r\n    @next_student_id = 1\r\n    @next_instructor_id = 1\r\n    @next_course_id = 1\r\n    @next_classroom_id = 1\r\n    @next_offering_id = 1\r\n  end\r\n\r\n  # --- Helper Methods ---\r\n  def generate_id_for(collection_name)\r\n    id_var = instance_variable_get(\"@next_#{collection_name}_id\")\r\n    instance_variable_set(\"@next_#{collection_name}_id\", id_var + 1)\r\n    id_var\r\n  end\r\n\r\n  def find_by_id(collection, id)\r\n    collection.find { |item| item.id == id }\r\n  end\r\n\r\n  def display_list(items, title, &block)\r\n    puts \"\\n--- #{title} ---\"\r\n    if items.empty?\r\n      puts \"No #{title.downcase} available.\"\r\n    else\r\n      items.each_with_index do |item, index|\r\n        print \"#{item.id}. \"\r\n        block.call(item) # Use a block to customize display for each type\r\n      end\r\n    end\r\n    puts \"-------------------\"\r\n  end\r\n\r\n  # --- Add Methods ---\r\n  def add_student\r\n    print \"Enter student name: \"\r\n    name = gets.chomp\r\n    student = Student.new(generate_id_for(:student), name)\r\n    @students << student\r\n    puts \"Student '#{name}' (ID: #{student.id}) added.\"\r\n  end\r\n\r\n  def add_instructor\r\n    print \"Enter instructor name: \"\r\n    name = gets.chomp\r\n    instructor = Instructor.new(generate_id_for(:instructor), name)\r\n    @instructors << instructor\r\n    puts \"Instructor '#{name}' (ID: #{instructor.id}) added.\"\r\n  end\r\n\r\n  def add_course\r\n    print \"Enter course name (e.g., CS101 - Intro to Programming): \"\r\n    name = gets.chomp\r\n    course = Course.new(generate_id_for(:course), name)\r\n    @courses << course\r\n    puts \"Course '#{name}' (ID: #{course.id}) added.\"\r\n  end\r\n\r\n  def add_classroom\r\n    print \"Enter classroom name (e.g., Room A101): \"\r\n    name = gets.chomp\r\n    print \"Enter classroom capacity: \"\r\n    capacity = gets.chomp.to_i\r\n    classroom = Classroom.new(generate_id_for(:classroom), name, capacity)\r\n    @classrooms << classroom\r\n    puts \"Classroom '#{name}' (Capacity: #{capacity}, ID: #{classroom.id}) added.\"\r\n  end\r\n\r\n  def add_timeslot\r\n    print \"Enter timeslot (e.g., Mon 09:00-10:00): \"\r\n    timeslot_str = gets.chomp\r\n    if @timeslots.include?(timeslot_str)\r\n      puts \"Timeslot already exists.\"\r\n    else\r\n      @timeslots << timeslot_str\r\n      puts \"Timeslot '#{timeslot_str}' added.\"\r\n    end\r\n  end\r\n\r\n  def add_subject_offering_to_schedule\r\n    return puts \"Please add courses first.\" if @courses.empty?\r\n    return puts \"Please add instructors first.\" if @instructors.empty?\r\n    # Students are optional for an offering, but usually present\r\n\r\n    display_list(@courses, \"Available Courses\") { |c| puts c.name }\r\n    print \"Enter Course ID to offer: \"\r\n    course_id = gets.chomp.to_i\r\n    course = find_by_id(@courses, course_id)\r\n    return puts \"Invalid Course ID.\" unless course\r\n\r\n    display_list(@instructors, \"Available Instructors\") { |i| puts i.name }\r\n    print \"Enter Instructor ID for this offering: \"\r\n    instructor_id = gets.chomp.to_i\r\n    instructor = find_by_id(@instructors, instructor_id)\r\n    return puts \"Invalid Instructor ID.\" unless instructor\r\n\r\n    enrolled_students_list = []\r\n    if @students.any?\r\n      loop do\r\n        display_list(@students, \"Available Students\") { |s| puts s.name }\r\n        display_list(enrolled_students_list, \"Currently Enrolled for this Offering\") { |s| puts s.name }\r\n        print \"Enter Student ID to enroll (or type 'done'): \"\r\n        student_input = gets.chomp\r\n        break if student_input.downcase == 'done'\r\n\r\n        student_id = student_input.to_i\r\n        student = find_by_id(@students, student_id)\r\n        if student && !enrolled_students_list.include?(student)\r\n          enrolled_students_list << student\r\n          puts \"#{student.name} added to this offering.\"\r\n        elsif enrolled_students_list.include?(student)\r\n          puts \"#{student.name} is already added.\"\r\n        else\r\n          puts \"Invalid Student ID.\"\r\n        end\r\n      end\r\n    else\r\n      puts \"No students available to enroll. Offering will have 0 students for now.\"\r\n    end\r\n\r\n    offering = SubjectOffering.new(generate_id_for(:offering), course, instructor, enrolled_students_list)\r\n    @subject_offerings_to_schedule << offering\r\n    puts \"Subject Offering '#{course.name}' by '#{instructor.name}' (ID: #{offering.id}) added to scheduling queue.\"\r\n  end\r\n\r\n  # --- View Methods ---\r\n  def view_students\r\n    display_list(@students, \"Students\") { |s| puts s.name }\r\n  end\r\n\r\n  def view_instructors\r\n    display_list(@instructors, \"Instructors\") { |i| puts i.name }\r\n  end\r\n\r\n  def view_courses\r\n    display_list(@courses, \"Courses\") { |c| puts c.name }\r\n  end\r\n\r\n  def view_classrooms\r\n    display_list(@classrooms, \"Classrooms\") { |c| puts \"#{c.name} (Capacity: #{c.capacity})\" }\r\n  end\r\n\r\n  def view_timeslots\r\n    puts \"\\n--- Available Timeslots ---\"\r\n    if @timeslots.empty?\r\n      puts \"No timeslots available.\"\r\n    else\r\n      @timeslots.each_with_index { |ts, i| puts \"#{i + 1}. #{ts}\" }\r\n    end\r\n    puts \"-------------------------\"\r\n  end\r\n\r\n  def view_offerings_to_schedule\r\n    display_list(@subject_offerings_to_schedule, \"Offerings Queued for Scheduling\") do |offering|\r\n      student_names = offering.students_enrolled.map(&:name).join(', ')\r\n      student_names = \"None\" if student_names.empty?\r\n      puts \"#{offering.course.name} - Instructor: #{offering.instructor.name} - Students: #{student_names}\"\r\n    end\r\n  end\r\n\r\n  def view_final_schedule\r\n    puts \"\\n--- FINAL SCHEDULE ---\"\r\n    if @final_schedule.empty?\r\n      puts \"No classes have been scheduled yet, or scheduling failed.\"\r\n    else\r\n      @final_schedule.each do |sc|\r\n        puts \"  Offering ID: #{sc.offering_id}\"\r\n        puts \"    Course:     #{sc.course_name}\"\r\n        puts \"    Instructor: #{sc.instructor_name}\"\r\n        puts \"    Classroom:  #{sc.classroom_name}\"\r\n        puts \"    Timeslot:   #{sc.timeslot}\"\r\n        puts \"    Students:   #{sc.student_names.join(', ')}\"\r\n        puts \"    --------------------\"\r\n      end\r\n    end\r\n    puts \"--------------------\"\r\n  end\r\n\r\n\r\n  # --- Scheduling Logic (Adapted from previous script) ---\r\n  def check_for_conflicts(offering_to_check, classroom, timeslot)\r\n    # 1. Classroom availability\r\n    if @final_schedule.any? { |sc| sc.classroom_name == classroom.name && sc.timeslot == timeslot }\r\n      return \"Conflict: Classroom #{classroom.name} busy at #{timeslot}.\"\r\n    end\r\n\r\n    # 2. Instructor availability\r\n    if @final_schedule.any? { |sc| sc.instructor_name == offering_to_check.instructor.name && sc.timeslot == timeslot }\r\n      return \"Conflict: Instructor #{offering_to_check.instructor.name} busy at #{timeslot}.\"\r\n    end\r\n\r\n    # 3. Student availability\r\n    offering_to_check.students_enrolled.each do |student|\r\n      if @final_schedule.any? { |sc| sc.student_names.include?(student.name) && sc.timeslot == timeslot }\r\n        return \"Conflict: Student #{student.name} busy at #{timeslot}.\"\r\n      end\r\n    end\r\n\r\n    # 4. Classroom capacity\r\n    if offering_to_check.students_enrolled.size > classroom.capacity\r\n      return \"Conflict: Classroom #{classroom.name} capacity (#{classroom.capacity}) too small for #{offering_to_check.students_enrolled.size} students.\"\r\n    end\r\n\r\n    # 5. Subject duplication (less critical here as user defines unique offerings by ID)\r\n    # But we should not schedule the *same offering ID* twice.\r\n    if @final_schedule.any? { |sc| sc.offering_id == offering_to_check.id }\r\n        return \"Error: Offering ID #{offering_to_check.id} is somehow already in the final schedule.\"\r\n    end\r\n\r\n    nil # No conflicts\r\n  end\r\n\r\n  def run_scheduler\r\n    if @subject_offerings_to_schedule.empty?\r\n      puts \"No subject offerings in the queue to schedule. Please add some first.\"\r\n      return\r\n    end\r\n    if @classrooms.empty?\r\n      puts \"No classrooms available. Please add classrooms first.\"\r\n      return\r\n    end\r\n    if @timeslots.empty?\r\n      puts \"No timeslots available. Please add timeslots first.\"\r\n      return\r\n    end\r\n\r\n    puts \"\\n--- Running Scheduler ---\"\r\n    @final_schedule.clear # Clear previous schedule before generating a new one\r\n\r\n    processed_offering_ids = [] # To avoid processing the same offering multiple times if input has duplicates by content\r\n\r\n    @subject_offerings_to_schedule.each do |current_offering|\r\n      if processed_offering_ids.include?(current_offering.id)\r\n        puts \"Skipping already processed offering ID: #{current_offering.id}\"\r\n        next\r\n      end\r\n\r\n      puts \"\\nAttempting to schedule: #{current_offering.course.name} (Instructor: #{current_offering.instructor.name})\"\r\n      scheduled_this_offering = false\r\n\r\n      @classrooms.each do |classroom|\r\n        @timeslots.each do |timeslot|\r\n          # puts \"  Trying Classroom: #{classroom.name}, Timeslot: #{timeslot}\" # Verbose\r\n          conflict_reason = check_for_conflicts(current_offering, classroom, timeslot)\r\n\r\n          if conflict_reason\r\n            # puts \"    #{conflict_reason}\" # Verbose\r\n            next # Try next timeslot or classroom\r\n          else\r\n            new_scheduled_class = ScheduledClass.new(\r\n              current_offering.id,\r\n              current_offering.course.name,\r\n              current_offering.instructor.name,\r\n              current_offering.students_enrolled.map(&:name),\r\n              classroom.name,\r\n              timeslot\r\n            )\r\n            @final_schedule << new_scheduled_class\r\n            scheduled_this_offering = true\r\n            processed_offering_ids << current_offering.id\r\n            puts \"  SUCCESS: Scheduled #{current_offering.course.name} in #{classroom.name} at #{timeslot}\"\r\n            break # Break from TIMESLOTS loop\r\n          end\r\n        end # End TIMESLOTS loop\r\n        break if scheduled_this_offering # Break from CLASSROOMS loop\r\n      end # End CLASSROOMS loop\r\n\r\n      unless scheduled_this_offering\r\n        puts \"  FAILURE: Could not find a suitable slot for #{current_offering.course.name} (ID: #{current_offering.id}).\"\r\n      end\r\n    end\r\n    puts \"--- Scheduler Finished ---\"\r\n    view_final_schedule\r\n  end\r\n\r\n\r\n  # --- Main Menu ---\r\n  def main_menu\r\n    loop do\r\n      puts \"\\n===== Timetable Scheduler Menu =====\"\r\n      puts \"1. Add Student\"\r\n      puts \"2. Add Instructor\"\r\n      puts \"3. Add Course (e.g., Math 101)\"\r\n      puts \"4. Add Classroom\"\r\n      puts \"5. Add Timeslot\"\r\n      puts \"6. Create Subject Offering (to be scheduled)\"\r\n      puts \"------------------------------------\"\r\n      puts \"7. View Students\"\r\n      puts \"8. View Instructors\"\r\n      puts \"9. View Courses\"\r\n      puts \"10. View Classrooms\"\r\n      puts \"11. View Timeslots\"\r\n      puts \"12. View Offerings Queued for Scheduling\"\r\n      puts \"------------------------------------\"\r\n      puts \"13. RUN SCHEDULER\"\r\n      puts \"14. View Final Schedule\"\r\n      puts \"------------------------------------\"\r\n      puts \"0. Exit\"\r\n      print \"Enter your choice: \"\r\n      choice = gets.chomp\r\n\r\n      case choice\r\n      when '1' then add_student\r\n      when '2' then add_instructor\r\n      when '3' then add_course\r\n      when '4' then add_classroom\r\n      when '5' then add_timeslot\r\n      when '6' then add_subject_offering_to_schedule\r\n      when '7' then view_students\r\n      when '8' then view_instructors\r\n      when '9' then view_courses\r\n      when '10' then view_classrooms\r\n      when '11' then view_timeslots\r\n      when '12' then view_offerings_to_schedule\r\n      when '13' then run_scheduler\r\n      when '14' then view_final_schedule\r\n      when '0'\r\n        puts \"Exiting. Goodbye!\"\r\n        break\r\n      else\r\n        puts \"Invalid choice. Please try again.\"\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\n# --- Start the application ---\r\nscheduler_app = TimetableScheduler.new\r\nscheduler_app.main_menu"
        }
    ]
}