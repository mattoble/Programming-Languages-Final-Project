{
    "sourceFile": "timetable_app/lib/provider/provider.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1747025149984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1747025149984,
            "name": "Commit-0",
            "content": "// lib/providers/scheduler_provider.dart\r\nimport 'package:flutter/foundation.dart';\r\nimport '../model/timetable_entities.dart';\r\n\r\nclass SchedulerProvider with ChangeNotifier {\r\n  final List<Student> _students = [];\r\n  final List<Instructor> _instructors = [];\r\n  final List<Course> _courses = [];\r\n  final List<Classroom> _classrooms = [];\r\n  final List<String> _timeslots = [];\r\n  final List<SubjectOffering> _subjectOfferingsToSchedule = [];\r\n  List<ScheduledClass> _finalSchedule = [];\r\n  List<String> _unscheduledMessages = [];\r\n\r\n  // Getters for UI to access data\r\n  List<Student> get students => List.unmodifiable(_students);\r\n  List<Instructor> get instructors => List.unmodifiable(_instructors);\r\n  List<Course> get courses => List.unmodifiable(_courses);\r\n  List<Classroom> get classrooms => List.unmodifiable(_classrooms);\r\n  List<String> get timeslots => List.unmodifiable(_timeslots);\r\n  List<SubjectOffering> get subjectOfferingsToSchedule =>\r\n      List.unmodifiable(_subjectOfferingsToSchedule);\r\n  List<ScheduledClass> get finalSchedule => List.unmodifiable(_finalSchedule);\r\n  List<String> get unscheduledMessages =>\r\n      List.unmodifiable(_unscheduledMessages);\r\n\r\n  int _nextStudentId = 1;\r\n  int _nextInstructorId = 1;\r\n  int _nextCourseId = 1;\r\n  int _nextClassroomId = 1;\r\n  int _nextOfferingId = 1;\r\n\r\n  // --- Helper Methods for ID Generation ---\r\n  int _generateIdFor(String type) {\r\n    switch (type) {\r\n      case 'student':\r\n        return _nextStudentId++;\r\n      case 'instructor':\r\n        return _nextInstructorId++;\r\n      case 'course':\r\n        return _nextCourseId++;\r\n      case 'classroom':\r\n        return _nextClassroomId++;\r\n      case 'offering':\r\n        return _nextOfferingId++;\r\n      default:\r\n        throw ArgumentError(\"Unknown type for ID generation: $type\");\r\n    }\r\n  }\r\n\r\n  // --- Add Methods ---\r\n  void addStudent(String name) {\r\n    if (name.trim().isEmpty) return;\r\n    _students.add(Student(_generateIdFor('student'), name.trim()));\r\n    notifyListeners();\r\n  }\r\n\r\n  void addInstructor(String name) {\r\n    if (name.trim().isEmpty) return;\r\n    _instructors.add(Instructor(_generateIdFor('instructor'), name.trim()));\r\n    notifyListeners();\r\n  }\r\n\r\n  void addCourse(String name) {\r\n    if (name.trim().isEmpty) return;\r\n    _courses.add(Course(_generateIdFor('course'), name.trim()));\r\n    notifyListeners();\r\n  }\r\n\r\n  void addClassroom(String name, int capacity) {\r\n    if (name.trim().isEmpty || capacity <= 0) return;\r\n    _classrooms.add(\r\n      Classroom(_generateIdFor('classroom'), name.trim(), capacity),\r\n    );\r\n    notifyListeners();\r\n  }\r\n\r\n  void addTimeslot(String timeslot) {\r\n    if (timeslot.trim().isEmpty || _timeslots.contains(timeslot.trim())) return;\r\n    _timeslots.add(timeslot.trim());\r\n    notifyListeners();\r\n  }\r\n\r\n  String? addSubjectOffering(\r\n    Course course,\r\n    Instructor instructor,\r\n    List<Student> enrolledStudents,\r\n  ) {\r\n    final offering = SubjectOffering(\r\n      _generateIdFor('offering'),\r\n      course,\r\n      instructor,\r\n      enrolledStudents,\r\n    );\r\n    _subjectOfferingsToSchedule.add(offering);\r\n    notifyListeners();\r\n    return null; // Or an error message if validation fails\r\n  }\r\n\r\n  // --- Scheduling Logic ---\r\n  String? _checkForConflicts(\r\n    SubjectOffering offeringToCheck,\r\n    Classroom classroom,\r\n    String timeslot,\r\n  ) {\r\n    if (_finalSchedule.any(\r\n      (sc) => sc.classroomName == classroom.name && sc.timeslot == timeslot,\r\n    )) {\r\n      return \"Classroom ${classroom.name} busy at $timeslot.\";\r\n    }\r\n    if (_finalSchedule.any(\r\n      (sc) =>\r\n          sc.instructorName == offeringToCheck.instructor.name &&\r\n          sc.timeslot == timeslot,\r\n    )) {\r\n      return \"Instructor ${offeringToCheck.instructor.name} busy at $timeslot.\";\r\n    }\r\n    for (var student in offeringToCheck.studentsEnrolled) {\r\n      if (_finalSchedule.any(\r\n        (sc) =>\r\n            sc.studentNames.contains(student.name) && sc.timeslot == timeslot,\r\n      )) {\r\n        return \"Student ${student.name} busy at $timeslot.\";\r\n      }\r\n    }\r\n    if (offeringToCheck.studentsEnrolled.length > classroom.capacity) {\r\n      return \"Classroom ${classroom.name} capacity (${classroom.capacity}) too small for ${offeringToCheck.studentsEnrolled.length} students.\";\r\n    }\r\n    if (_finalSchedule.any((sc) => sc.offeringId == offeringToCheck.id)) {\r\n      return \"Error: Offering ID ${offeringToCheck.id} is somehow already in the final schedule.\";\r\n    }\r\n    return null;\r\n  }\r\n\r\n  Map<String, dynamic> runScheduler() {\r\n    _finalSchedule.clear();\r\n    _unscheduledMessages.clear();\r\n    Set<int> processedOfferingIds = {};\r\n    int scheduledCount = 0;\r\n\r\n    if (_subjectOfferingsToSchedule.isEmpty) {\r\n      _unscheduledMessages.add(\r\n        \"No subject offerings in the queue to schedule.\",\r\n      );\r\n      notifyListeners();\r\n      return {'scheduled': scheduledCount, 'total': 0};\r\n    }\r\n    if (_classrooms.isEmpty) {\r\n      _unscheduledMessages.add(\"No classrooms available.\");\r\n      notifyListeners();\r\n      return {\r\n        'scheduled': scheduledCount,\r\n        'total': _subjectOfferingsToSchedule.length,\r\n      };\r\n    }\r\n    if (_timeslots.isEmpty) {\r\n      _unscheduledMessages.add(\"No timeslots available.\");\r\n      notifyListeners();\r\n      return {\r\n        'scheduled': scheduledCount,\r\n        'total': _subjectOfferingsToSchedule.length,\r\n      };\r\n    }\r\n\r\n    for (var currentOffering in _subjectOfferingsToSchedule) {\r\n      if (processedOfferingIds.contains(currentOffering.id)) continue;\r\n\r\n      bool scheduledThisOffering = false;\r\n      String lastConflictReason = \"No suitable slot found.\";\r\n\r\n      for (var classroom in _classrooms) {\r\n        for (var timeslot in _timeslots) {\r\n          String? conflictReason = _checkForConflicts(\r\n            currentOffering,\r\n            classroom,\r\n            timeslot,\r\n          );\r\n          if (conflictReason == null) {\r\n            _finalSchedule.add(\r\n              ScheduledClass(\r\n                currentOffering.id,\r\n                currentOffering.course.name,\r\n                currentOffering.instructor.name,\r\n                currentOffering.studentsEnrolled.map((s) => s.name).toList(),\r\n                classroom.name,\r\n                timeslot,\r\n              ),\r\n            );\r\n            scheduledThisOffering = true;\r\n            scheduledCount++;\r\n            processedOfferingIds.add(currentOffering.id);\r\n            break;\r\n          } else {\r\n            lastConflictReason = conflictReason;\r\n          }\r\n        }\r\n        if (scheduledThisOffering) break;\r\n      }\r\n\r\n      if (!scheduledThisOffering) {\r\n        _unscheduledMessages.add(\r\n          \"Could not schedule '${currentOffering.course.name}' (ID: ${currentOffering.id}): $lastConflictReason\",\r\n        );\r\n      }\r\n    }\r\n    notifyListeners();\r\n    return {\r\n      'scheduled': scheduledCount,\r\n      'total': _subjectOfferingsToSchedule.length,\r\n    };\r\n  }\r\n}\r\n"
        }
    ]
}