{
    "sourceFile": "timetable_app/lib/screens/main_scheduler_screen.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1747025153311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747025162669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,14 +63,16 @@\n                   labelText: labelText,\r\n                   border: OutlineInputBorder(),\r\n                 ),\r\n                 keyboardType: keyboardType,\r\n-                validator: validator ?? (value) {\r\n-                  if (value == null || value.trim().isEmpty) {\r\n-                    return 'Please enter $labelText';\r\n-                  }\r\n-                  return null;\r\n-                },\r\n+                validator:\r\n+                    validator ??\r\n+                    (value) {\r\n+                      if (value == null || value.trim().isEmpty) {\r\n+                        return 'Please enter $labelText';\r\n+                      }\r\n+                      return null;\r\n+                    },\r\n               ),\r\n             ),\r\n             SizedBox(width: 10),\r\n             ElevatedButton(\r\n@@ -94,25 +96,31 @@\n     required Widget Function(T item) itemBuilder,\r\n     bool initiallyExpanded = false,\r\n   }) {\r\n     return ExpansionTile(\r\n-      title: Text(title, style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),\r\n+      title: Text(\r\n+        title,\r\n+        style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n+      ),\r\n       initiallyExpanded: initiallyExpanded,\r\n-      children: items.isEmpty\r\n-          ? [Padding(padding: const EdgeInsets.all(16.0), child: Text('No $title added yet.'))]\r\n-          : items.map((item) => itemBuilder(item)).toList(),\r\n+      children:\r\n+          items.isEmpty\r\n+              ? [\r\n+                Padding(\r\n+                  padding: const EdgeInsets.all(16.0),\r\n+                  child: Text('No $title added yet.'),\r\n+                ),\r\n+              ]\r\n+              : items.map((item) => itemBuilder(item)).toList(),\r\n     );\r\n   }\r\n \r\n-\r\n   @override\r\n   Widget build(BuildContext context) {\r\n     final scheduler = Provider.of<SchedulerProvider>(context);\r\n \r\n     return Scaffold(\r\n-      appBar: AppBar(\r\n-        title: Text('All-in-One Timetable Scheduler'),\r\n-      ),\r\n+      appBar: AppBar(title: Text('All-in-One Timetable Scheduler')),\r\n       body: SingleChildScrollView(\r\n         padding: EdgeInsets.all(16.0),\r\n         child: Column(\r\n           crossAxisAlignment: CrossAxisAlignment.stretch,\r\n@@ -120,14 +128,15 @@\n             // --- Students Section ---\r\n             _buildListSection<Student>(\r\n               title: 'Students (${scheduler.students.length})',\r\n               items: scheduler.students,\r\n-              itemBuilder: (student) => Card(\r\n-                child: ListTile(\r\n-                  leading: CircleAvatar(child: Text(student.id.toString())),\r\n-                  title: Text(student.name),\r\n-                ),\r\n-              ),\r\n+              itemBuilder:\r\n+                  (student) => Card(\r\n+                    child: ListTile(\r\n+                      leading: CircleAvatar(child: Text(student.id.toString())),\r\n+                      title: Text(student.name),\r\n+                    ),\r\n+                  ),\r\n             ),\r\n             _buildTextFieldWithButton(\r\n               controller: _studentNameController,\r\n               labelText: 'Student Name',\r\n@@ -142,59 +151,66 @@\n             // --- Instructors Section ---\r\n             _buildListSection<Instructor>(\r\n               title: 'Instructors (${scheduler.instructors.length})',\r\n               items: scheduler.instructors,\r\n-              itemBuilder: (instructor) => Card(\r\n-                child: ListTile(\r\n-                  leading: CircleAvatar(child: Text(instructor.id.toString())),\r\n-                  title: Text(instructor.name),\r\n-                ),\r\n-              ),\r\n+              itemBuilder:\r\n+                  (instructor) => Card(\r\n+                    child: ListTile(\r\n+                      leading: CircleAvatar(\r\n+                        child: Text(instructor.id.toString()),\r\n+                      ),\r\n+                      title: Text(instructor.name),\r\n+                    ),\r\n+                  ),\r\n             ),\r\n             _buildTextFieldWithButton(\r\n               controller: _instructorNameController,\r\n               labelText: 'Instructor Name',\r\n               buttonText: 'Add Instructor',\r\n               onButtonPressed: () {\r\n                 scheduler.addInstructor(_instructorNameController.text);\r\n-                 _showSnackbar('Instructor added');\r\n+                _showSnackbar('Instructor added');\r\n               },\r\n             ),\r\n             Divider(height: 30, thickness: 1),\r\n \r\n             // --- Courses Section ---\r\n             _buildListSection<Course>(\r\n               title: 'Courses (${scheduler.courses.length})',\r\n               items: scheduler.courses,\r\n-              itemBuilder: (course) => Card(\r\n-                child: ListTile(\r\n-                  leading: CircleAvatar(child: Text(course.id.toString())),\r\n-                  title: Text(course.name),\r\n-                ),\r\n-              ),\r\n+              itemBuilder:\r\n+                  (course) => Card(\r\n+                    child: ListTile(\r\n+                      leading: CircleAvatar(child: Text(course.id.toString())),\r\n+                      title: Text(course.name),\r\n+                    ),\r\n+                  ),\r\n             ),\r\n             _buildTextFieldWithButton(\r\n               controller: _courseNameController,\r\n               labelText: 'Course Name',\r\n               buttonText: 'Add Course',\r\n               onButtonPressed: () {\r\n                 scheduler.addCourse(_courseNameController.text);\r\n-                 _showSnackbar('Course added');\r\n+                _showSnackbar('Course added');\r\n               },\r\n             ),\r\n             Divider(height: 30, thickness: 1),\r\n \r\n             // --- Classrooms Section ---\r\n             _buildListSection<Classroom>(\r\n               title: 'Classrooms (${scheduler.classrooms.length})',\r\n               items: scheduler.classrooms,\r\n-              itemBuilder: (classroom) => Card(\r\n-                child: ListTile(\r\n-                  leading: CircleAvatar(child: Text(classroom.id.toString())),\r\n-                  title: Text(classroom.name),\r\n-                  subtitle: Text('Capacity: ${classroom.capacity}'),\r\n-                ),\r\n-              ),\r\n+              itemBuilder:\r\n+                  (classroom) => Card(\r\n+                    child: ListTile(\r\n+                      leading: CircleAvatar(\r\n+                        child: Text(classroom.id.toString()),\r\n+                      ),\r\n+                      title: Text(classroom.name),\r\n+                      subtitle: Text('Capacity: ${classroom.capacity}'),\r\n+                    ),\r\n+                  ),\r\n             ),\r\n             // Form for Classroom (Name and Capacity)\r\n             Padding(\r\n               padding: const EdgeInsets.symmetric(vertical: 8.0),\r\n@@ -204,22 +220,34 @@\n                   Expanded(\r\n                     flex: 2,\r\n                     child: TextFormField(\r\n                       controller: _classroomNameController,\r\n-                      decoration: InputDecoration(labelText: 'Classroom Name', border: OutlineInputBorder()),\r\n-                      validator: (v) => (v == null || v.trim().isEmpty) ? 'Required' : null,\r\n+                      decoration: InputDecoration(\r\n+                        labelText: 'Classroom Name',\r\n+                        border: OutlineInputBorder(),\r\n+                      ),\r\n+                      validator:\r\n+                          (v) =>\r\n+                              (v == null || v.trim().isEmpty)\r\n+                                  ? 'Required'\r\n+                                  : null,\r\n                     ),\r\n                   ),\r\n                   SizedBox(width: 10),\r\n                   Expanded(\r\n                     flex: 1,\r\n                     child: TextFormField(\r\n                       controller: _classroomCapacityController,\r\n-                      decoration: InputDecoration(labelText: 'Capacity', border: OutlineInputBorder()),\r\n+                      decoration: InputDecoration(\r\n+                        labelText: 'Capacity',\r\n+                        border: OutlineInputBorder(),\r\n+                      ),\r\n                       keyboardType: TextInputType.number,\r\n                       validator: (v) {\r\n                         if (v == null || v.trim().isEmpty) return 'Required';\r\n-                        if (int.tryParse(v.trim()) == null || int.parse(v.trim()) <= 0) return 'Invalid';\r\n+                        if (int.tryParse(v.trim()) == null ||\r\n+                            int.parse(v.trim()) <= 0)\r\n+                          return 'Invalid';\r\n                         return null;\r\n                       },\r\n                     ),\r\n                   ),\r\n@@ -228,9 +256,10 @@\n                     onPressed: () {\r\n                       // Basic validation for demo, ideally use a Form widget\r\n                       if (_classroomNameController.text.isNotEmpty &&\r\n                           _classroomCapacityController.text.isNotEmpty &&\r\n-                          int.tryParse(_classroomCapacityController.text) != null &&\r\n+                          int.tryParse(_classroomCapacityController.text) !=\r\n+                              null &&\r\n                           int.parse(_classroomCapacityController.text) > 0) {\r\n                         scheduler.addClassroom(\r\n                           _classroomNameController.text,\r\n                           int.parse(_classroomCapacityController.text),\r\n@@ -249,113 +278,165 @@\n             ),\r\n             Divider(height: 30, thickness: 1),\r\n \r\n             // --- Timeslots Section ---\r\n-             _buildListSection<String>(\r\n+            _buildListSection<String>(\r\n               title: 'Timeslots (${scheduler.timeslots.length})',\r\n               items: scheduler.timeslots,\r\n-              itemBuilder: (timeslot) => Card(child: ListTile(title: Text(timeslot))),\r\n+              itemBuilder:\r\n+                  (timeslot) => Card(child: ListTile(title: Text(timeslot))),\r\n             ),\r\n             _buildTextFieldWithButton(\r\n               controller: _timeslotController,\r\n               labelText: 'Timeslot (e.g., Mon 09:00-10:00)',\r\n               buttonText: 'Add Timeslot',\r\n               onButtonPressed: () {\r\n                 scheduler.addTimeslot(_timeslotController.text);\r\n-                 _showSnackbar('Timeslot added');\r\n+                _showSnackbar('Timeslot added');\r\n               },\r\n             ),\r\n             Divider(height: 30, thickness: 1),\r\n \r\n             // --- Create Subject Offering Section ---\r\n             ExpansionTile(\r\n-              title: Text('Create Subject Offering (${scheduler.subjectOfferingsToSchedule.length} queued)', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),\r\n+              title: Text(\r\n+                'Create Subject Offering (${scheduler.subjectOfferingsToSchedule.length} queued)',\r\n+                style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\r\n+              ),\r\n               initiallyExpanded: true,\r\n               children: [\r\n                 if (scheduler.courses.isNotEmpty)\r\n                   DropdownButtonFormField<Course>(\r\n-                    decoration: InputDecoration(labelText: 'Select Course', border: OutlineInputBorder()),\r\n+                    decoration: InputDecoration(\r\n+                      labelText: 'Select Course',\r\n+                      border: OutlineInputBorder(),\r\n+                    ),\r\n                     value: _selectedCourseForOffering,\r\n-                    items: scheduler.courses.map((Course course) {\r\n-                      return DropdownMenuItem<Course>(value: course, child: Text(course.name));\r\n-                    }).toList(),\r\n-                    onChanged: (Course? newValue) => setState(() => _selectedCourseForOffering = newValue),\r\n+                    items:\r\n+                        scheduler.courses.map((Course course) {\r\n+                          return DropdownMenuItem<Course>(\r\n+                            value: course,\r\n+                            child: Text(course.name),\r\n+                          );\r\n+                        }).toList(),\r\n+                    onChanged:\r\n+                        (Course? newValue) => setState(\r\n+                          () => _selectedCourseForOffering = newValue,\r\n+                        ),\r\n                     validator: (v) => v == null ? 'Required' : null,\r\n                   )\r\n                 else\r\n-                  Padding(padding: const EdgeInsets.all(8.0), child: Text('Add courses first.')),\r\n+                  Padding(\r\n+                    padding: const EdgeInsets.all(8.0),\r\n+                    child: Text('Add courses first.'),\r\n+                  ),\r\n                 SizedBox(height: 10),\r\n \r\n                 if (scheduler.instructors.isNotEmpty)\r\n                   DropdownButtonFormField<Instructor>(\r\n-                    decoration: InputDecoration(labelText: 'Select Instructor', border: OutlineInputBorder()),\r\n+                    decoration: InputDecoration(\r\n+                      labelText: 'Select Instructor',\r\n+                      border: OutlineInputBorder(),\r\n+                    ),\r\n                     value: _selectedInstructorForOffering,\r\n-                    items: scheduler.instructors.map((Instructor i) {\r\n-                      return DropdownMenuItem<Instructor>(value: i, child: Text(i.name));\r\n-                    }).toList(),\r\n-                    onChanged: (Instructor? newValue) => setState(() => _selectedInstructorForOffering = newValue),\r\n-                     validator: (v) => v == null ? 'Required' : null,\r\n+                    items:\r\n+                        scheduler.instructors.map((Instructor i) {\r\n+                          return DropdownMenuItem<Instructor>(\r\n+                            value: i,\r\n+                            child: Text(i.name),\r\n+                          );\r\n+                        }).toList(),\r\n+                    onChanged:\r\n+                        (Instructor? newValue) => setState(\r\n+                          () => _selectedInstructorForOffering = newValue,\r\n+                        ),\r\n+                    validator: (v) => v == null ? 'Required' : null,\r\n                   )\r\n                 else\r\n-                   Padding(padding: const EdgeInsets.all(8.0), child: Text('Add instructors first.')),\r\n+                  Padding(\r\n+                    padding: const EdgeInsets.all(8.0),\r\n+                    child: Text('Add instructors first.'),\r\n+                  ),\r\n                 SizedBox(height: 10),\r\n \r\n-                Text('Select Students for Offering (Optional):', style: TextStyle(fontSize: 16)),\r\n+                Text(\r\n+                  'Select Students for Offering (Optional):',\r\n+                  style: TextStyle(fontSize: 16),\r\n+                ),\r\n                 if (scheduler.students.isNotEmpty)\r\n                   Container(\r\n                     height: 150, // Constrain height\r\n-                    decoration: BoxDecoration(border: Border.all(color: Colors.grey)),\r\n+                    decoration: BoxDecoration(\r\n+                      border: Border.all(color: Colors.grey),\r\n+                    ),\r\n                     child: ListView(\r\n-                      children: scheduler.students.map((student) {\r\n-                        return CheckboxListTile(\r\n-                          title: Text(student.name),\r\n-                          value: _selectedStudentsForOffering.contains(student),\r\n-                          onChanged: (bool? selected) {\r\n-                            setState(() {\r\n-                              if (selected == true) {\r\n-                                _selectedStudentsForOffering.add(student);\r\n-                              } else {\r\n-                                _selectedStudentsForOffering.remove(student);\r\n-                              }\r\n-                            });\r\n-                          },\r\n-                        );\r\n-                      }).toList(),\r\n+                      children:\r\n+                          scheduler.students.map((student) {\r\n+                            return CheckboxListTile(\r\n+                              title: Text(student.name),\r\n+                              value: _selectedStudentsForOffering.contains(\r\n+                                student,\r\n+                              ),\r\n+                              onChanged: (bool? selected) {\r\n+                                setState(() {\r\n+                                  if (selected == true) {\r\n+                                    _selectedStudentsForOffering.add(student);\r\n+                                  } else {\r\n+                                    _selectedStudentsForOffering.remove(\r\n+                                      student,\r\n+                                    );\r\n+                                  }\r\n+                                });\r\n+                              },\r\n+                            );\r\n+                          }).toList(),\r\n                     ),\r\n                   )\r\n                 else\r\n-                  Padding(padding: const EdgeInsets.all(8.0), child: Text('Add students to select them.')),\r\n+                  Padding(\r\n+                    padding: const EdgeInsets.all(8.0),\r\n+                    child: Text('Add students to select them.'),\r\n+                  ),\r\n                 SizedBox(height: 10),\r\n                 ElevatedButton(\r\n                   onPressed: () {\r\n-                    if (_selectedCourseForOffering != null && _selectedInstructorForOffering != null) {\r\n+                    if (_selectedCourseForOffering != null &&\r\n+                        _selectedInstructorForOffering != null) {\r\n                       scheduler.addSubjectOffering(\r\n                         _selectedCourseForOffering!,\r\n                         _selectedInstructorForOffering!,\r\n                         _selectedStudentsForOffering.toList(),\r\n                       );\r\n-                      setState(() { // Reset form fields for offering\r\n+                      setState(() {\r\n+                        // Reset form fields for offering\r\n                         _selectedCourseForOffering = null;\r\n                         _selectedInstructorForOffering = null;\r\n                         _selectedStudentsForOffering.clear();\r\n                       });\r\n                       _showSnackbar('Offering added to queue');\r\n                     } else {\r\n-                       _showSnackbar('Please select course and instructor for offering.');\r\n+                      _showSnackbar(\r\n+                        'Please select course and instructor for offering.',\r\n+                      );\r\n                     }\r\n                   },\r\n                   child: Text('Add Offering to Queue'),\r\n                 ),\r\n                 SizedBox(height: 10),\r\n-                 _buildListSection<SubjectOffering>(\r\n+                _buildListSection<SubjectOffering>(\r\n                   title: 'Queued Offerings',\r\n                   items: scheduler.subjectOfferingsToSchedule,\r\n-                  itemBuilder: (offering) => Card(\r\n-                    child: ListTile(\r\n-                      title: Text('${offering.course.name} by ${offering.instructor.name}'),\r\n-                      subtitle: Text('Students: ${offering.studentsSummary}'),\r\n-                    ),\r\n-                  ),\r\n+                  itemBuilder:\r\n+                      (offering) => Card(\r\n+                        child: ListTile(\r\n+                          title: Text(\r\n+                            '${offering.course.name} by ${offering.instructor.name}',\r\n+                          ),\r\n+                          subtitle: Text(\r\n+                            'Students: ${offering.studentsSummary}',\r\n+                          ),\r\n+                        ),\r\n+                      ),\r\n                 ),\r\n               ],\r\n             ),\r\n             Divider(height: 30, thickness: 1),\r\n@@ -374,58 +455,83 @@\n                 final unscheduledMessages = scheduler.unscheduledMessages;\r\n \r\n                 await showDialog(\r\n                   context: context,\r\n-                  builder: (ctx) => AlertDialog(\r\n-                    title: Text('Scheduler Run Complete'),\r\n-                    content: SingleChildScrollView(\r\n-                      child: ListBody(\r\n-                        children: <Widget>[\r\n-                          Text('Scheduled ${result['scheduled']} out of ${result['total']} offerings.'),\r\n-                          if (unscheduledMessages.isNotEmpty) ...[\r\n-                            SizedBox(height: 10),\r\n-                            Text('Details for Unscheduled:', style: TextStyle(fontWeight: FontWeight.bold)),\r\n-                            ...unscheduledMessages.map((msg) => Padding(\r\n-                              padding: const EdgeInsets.only(top:4.0),\r\n-                              child: Text('- $msg', style: TextStyle(fontSize: 12)),\r\n-                            )),\r\n-                          ]\r\n+                  builder:\r\n+                      (ctx) => AlertDialog(\r\n+                        title: Text('Scheduler Run Complete'),\r\n+                        content: SingleChildScrollView(\r\n+                          child: ListBody(\r\n+                            children: <Widget>[\r\n+                              Text(\r\n+                                'Scheduled ${result['scheduled']} out of ${result['total']} offerings.',\r\n+                              ),\r\n+                              if (unscheduledMessages.isNotEmpty) ...[\r\n+                                SizedBox(height: 10),\r\n+                                Text(\r\n+                                  'Details for Unscheduled:',\r\n+                                  style: TextStyle(fontWeight: FontWeight.bold),\r\n+                                ),\r\n+                                ...unscheduledMessages.map(\r\n+                                  (msg) => Padding(\r\n+                                    padding: const EdgeInsets.only(top: 4.0),\r\n+                                    child: Text(\r\n+                                      '- $msg',\r\n+                                      style: TextStyle(fontSize: 12),\r\n+                                    ),\r\n+                                  ),\r\n+                                ),\r\n+                              ],\r\n+                            ],\r\n+                          ),\r\n+                        ),\r\n+                        actions: <Widget>[\r\n+                          TextButton(\r\n+                            child: Text('OK'),\r\n+                            onPressed: () => Navigator.of(ctx).pop(),\r\n+                          ),\r\n                         ],\r\n                       ),\r\n-                    ),\r\n-                    actions: <Widget>[TextButton(child: Text('OK'), onPressed: () => Navigator.of(ctx).pop())],\r\n-                  ),\r\n                 );\r\n               },\r\n\\ No newline at end of file\n             ),\r\n             SizedBox(height: 20),\r\n             _buildListSection<ScheduledClass>(\r\n               title: 'Final Schedule (${scheduler.finalSchedule.length})',\r\n               initiallyExpanded: true, // Often want to see this\r\n               items: scheduler.finalSchedule,\r\n-              itemBuilder: (scheduledClass) => Card(\r\n-                elevation: 2,\r\n-                margin: EdgeInsets.symmetric(vertical: 8.0),\r\n-                child: Padding(\r\n-                  padding: const EdgeInsets.all(12.0),\r\n-                  child: Column(\r\n-                    crossAxisAlignment: CrossAxisAlignment.start,\r\n-                    children: [\r\n-                      Text(scheduledClass.courseName, style: Theme.of(context).textTheme.titleLarge),\r\n-                      SizedBox(height: 4),\r\n-                      Text('Instructor: ${scheduledClass.instructorName}'),\r\n-                      Text('Classroom: ${scheduledClass.classroomName}'),\r\n-                      Text('Timeslot: ${scheduledClass.timeslot}'),\r\n-                      SizedBox(height: 4),\r\n-                      Text('Students: ${scheduledClass.studentNames.join(', ')}'),\r\n-                      Text('Offering ID: ${scheduledClass.offeringId}', style: TextStyle(fontSize: 10, color: Colors.grey)),\r\n-                    ],\r\n+              itemBuilder:\r\n+                  (scheduledClass) => Card(\r\n+                    elevation: 2,\r\n+                    margin: EdgeInsets.symmetric(vertical: 8.0),\r\n+                    child: Padding(\r\n+                      padding: const EdgeInsets.all(12.0),\r\n+                      child: Column(\r\n+                        crossAxisAlignment: CrossAxisAlignment.start,\r\n+                        children: [\r\n+                          Text(\r\n+                            scheduledClass.courseName,\r\n+                            style: Theme.of(context).textTheme.titleLarge,\r\n+                          ),\r\n+                          SizedBox(height: 4),\r\n+                          Text('Instructor: ${scheduledClass.instructorName}'),\r\n+                          Text('Classroom: ${scheduledClass.classroomName}'),\r\n+                          Text('Timeslot: ${scheduledClass.timeslot}'),\r\n+                          SizedBox(height: 4),\r\n+                          Text(\r\n+                            'Students: ${scheduledClass.studentNames.join(', ')}',\r\n+                          ),\r\n+                          Text(\r\n+                            'Offering ID: ${scheduledClass.offeringId}',\r\n+                            style: TextStyle(fontSize: 10, color: Colors.grey),\r\n+                          ),\r\n+                        ],\r\n+                      ),\r\n+                    ),\r\n                   ),\r\n-                ),\r\n-              ),\r\n             ),\r\n           ],\r\n         ),\r\n       ),\r\n     );\r\n   }\r\n-}\n+}\r\n"
                },
                {
                    "date": 1747025431344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n // lib/screens/main_scheduler_screen.dart\r\n import 'package:flutter/material.dart';\r\n import 'package:provider/provider.dart';\r\n-import '../provider/provider.dart';\r\n-import '../model/timetable_entities.dart'; // Assuming your models are here\r\n+import '../providers/scheduler_provider.dart';\r\n+import '../models/timetable_entities.dart'; // Assuming your models are here\r\n \r\n class MainSchedulerScreen extends StatefulWidget {\r\n   @override\r\n   _MainSchedulerScreenState createState() => _MainSchedulerScreenState();\r\n"
                }
            ],
            "date": 1747025153311,
            "name": "Commit-0",
            "content": "// lib/screens/main_scheduler_screen.dart\r\nimport 'package:flutter/material.dart';\r\nimport 'package:provider/provider.dart';\r\nimport '../provider/provider.dart';\r\nimport '../model/timetable_entities.dart'; // Assuming your models are here\r\n\r\nclass MainSchedulerScreen extends StatefulWidget {\r\n  @override\r\n  _MainSchedulerScreenState createState() => _MainSchedulerScreenState();\r\n}\r\n\r\nclass _MainSchedulerScreenState extends State<MainSchedulerScreen> {\r\n  // Controllers for text fields\r\n  final _studentNameController = TextEditingController();\r\n  final _instructorNameController = TextEditingController();\r\n  final _courseNameController = TextEditingController();\r\n  final _classroomNameController = TextEditingController();\r\n  final _classroomCapacityController = TextEditingController();\r\n  final _timeslotController = TextEditingController();\r\n\r\n  // For Create Offering\r\n  Course? _selectedCourseForOffering;\r\n  Instructor? _selectedInstructorForOffering;\r\n  final Set<Student> _selectedStudentsForOffering = {};\r\n\r\n  @override\r\n  void dispose() {\r\n    _studentNameController.dispose();\r\n    _instructorNameController.dispose();\r\n    _courseNameController.dispose();\r\n    _classroomNameController.dispose();\r\n    _classroomCapacityController.dispose();\r\n    _timeslotController.dispose();\r\n    super.dispose();\r\n  }\r\n\r\n  void _showSnackbar(String message) {\r\n    ScaffoldMessenger.of(context).showSnackBar(\r\n      SnackBar(content: Text(message), duration: Duration(seconds: 2)),\r\n    );\r\n  }\r\n\r\n  Widget _buildTextFieldWithButton({\r\n    required TextEditingController controller,\r\n    required String labelText,\r\n    required String buttonText,\r\n    required VoidCallback onButtonPressed,\r\n    TextInputType keyboardType = TextInputType.text,\r\n    String? Function(String?)? validator,\r\n  }) {\r\n    final formKey = GlobalKey<FormState>();\r\n    return Form(\r\n      key: formKey,\r\n      child: Padding(\r\n        padding: const EdgeInsets.symmetric(vertical: 8.0),\r\n        child: Row(\r\n          crossAxisAlignment: CrossAxisAlignment.start,\r\n          children: [\r\n            Expanded(\r\n              child: TextFormField(\r\n                controller: controller,\r\n                decoration: InputDecoration(\r\n                  labelText: labelText,\r\n                  border: OutlineInputBorder(),\r\n                ),\r\n                keyboardType: keyboardType,\r\n                validator: validator ?? (value) {\r\n                  if (value == null || value.trim().isEmpty) {\r\n                    return 'Please enter $labelText';\r\n                  }\r\n                  return null;\r\n                },\r\n              ),\r\n            ),\r\n            SizedBox(width: 10),\r\n            ElevatedButton(\r\n              onPressed: () {\r\n                if (formKey.currentState!.validate()) {\r\n                  onButtonPressed();\r\n                  controller.clear(); // Clear after successful submission\r\n                }\r\n              },\r\n              child: Text(buttonText),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  Widget _buildListSection<T>({\r\n    required String title,\r\n    required List<T> items,\r\n    required Widget Function(T item) itemBuilder,\r\n    bool initiallyExpanded = false,\r\n  }) {\r\n    return ExpansionTile(\r\n      title: Text(title, style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),\r\n      initiallyExpanded: initiallyExpanded,\r\n      children: items.isEmpty\r\n          ? [Padding(padding: const EdgeInsets.all(16.0), child: Text('No $title added yet.'))]\r\n          : items.map((item) => itemBuilder(item)).toList(),\r\n    );\r\n  }\r\n\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    final scheduler = Provider.of<SchedulerProvider>(context);\r\n\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        title: Text('All-in-One Timetable Scheduler'),\r\n      ),\r\n      body: SingleChildScrollView(\r\n        padding: EdgeInsets.all(16.0),\r\n        child: Column(\r\n          crossAxisAlignment: CrossAxisAlignment.stretch,\r\n          children: <Widget>[\r\n            // --- Students Section ---\r\n            _buildListSection<Student>(\r\n              title: 'Students (${scheduler.students.length})',\r\n              items: scheduler.students,\r\n              itemBuilder: (student) => Card(\r\n                child: ListTile(\r\n                  leading: CircleAvatar(child: Text(student.id.toString())),\r\n                  title: Text(student.name),\r\n                ),\r\n              ),\r\n            ),\r\n            _buildTextFieldWithButton(\r\n              controller: _studentNameController,\r\n              labelText: 'Student Name',\r\n              buttonText: 'Add Student',\r\n              onButtonPressed: () {\r\n                scheduler.addStudent(_studentNameController.text);\r\n                _showSnackbar('Student added');\r\n              },\r\n            ),\r\n            Divider(height: 30, thickness: 1),\r\n\r\n            // --- Instructors Section ---\r\n            _buildListSection<Instructor>(\r\n              title: 'Instructors (${scheduler.instructors.length})',\r\n              items: scheduler.instructors,\r\n              itemBuilder: (instructor) => Card(\r\n                child: ListTile(\r\n                  leading: CircleAvatar(child: Text(instructor.id.toString())),\r\n                  title: Text(instructor.name),\r\n                ),\r\n              ),\r\n            ),\r\n            _buildTextFieldWithButton(\r\n              controller: _instructorNameController,\r\n              labelText: 'Instructor Name',\r\n              buttonText: 'Add Instructor',\r\n              onButtonPressed: () {\r\n                scheduler.addInstructor(_instructorNameController.text);\r\n                 _showSnackbar('Instructor added');\r\n              },\r\n            ),\r\n            Divider(height: 30, thickness: 1),\r\n\r\n            // --- Courses Section ---\r\n            _buildListSection<Course>(\r\n              title: 'Courses (${scheduler.courses.length})',\r\n              items: scheduler.courses,\r\n              itemBuilder: (course) => Card(\r\n                child: ListTile(\r\n                  leading: CircleAvatar(child: Text(course.id.toString())),\r\n                  title: Text(course.name),\r\n                ),\r\n              ),\r\n            ),\r\n            _buildTextFieldWithButton(\r\n              controller: _courseNameController,\r\n              labelText: 'Course Name',\r\n              buttonText: 'Add Course',\r\n              onButtonPressed: () {\r\n                scheduler.addCourse(_courseNameController.text);\r\n                 _showSnackbar('Course added');\r\n              },\r\n            ),\r\n            Divider(height: 30, thickness: 1),\r\n\r\n            // --- Classrooms Section ---\r\n            _buildListSection<Classroom>(\r\n              title: 'Classrooms (${scheduler.classrooms.length})',\r\n              items: scheduler.classrooms,\r\n              itemBuilder: (classroom) => Card(\r\n                child: ListTile(\r\n                  leading: CircleAvatar(child: Text(classroom.id.toString())),\r\n                  title: Text(classroom.name),\r\n                  subtitle: Text('Capacity: ${classroom.capacity}'),\r\n                ),\r\n              ),\r\n            ),\r\n            // Form for Classroom (Name and Capacity)\r\n            Padding(\r\n              padding: const EdgeInsets.symmetric(vertical: 8.0),\r\n              child: Row(\r\n                crossAxisAlignment: CrossAxisAlignment.start,\r\n                children: [\r\n                  Expanded(\r\n                    flex: 2,\r\n                    child: TextFormField(\r\n                      controller: _classroomNameController,\r\n                      decoration: InputDecoration(labelText: 'Classroom Name', border: OutlineInputBorder()),\r\n                      validator: (v) => (v == null || v.trim().isEmpty) ? 'Required' : null,\r\n                    ),\r\n                  ),\r\n                  SizedBox(width: 10),\r\n                  Expanded(\r\n                    flex: 1,\r\n                    child: TextFormField(\r\n                      controller: _classroomCapacityController,\r\n                      decoration: InputDecoration(labelText: 'Capacity', border: OutlineInputBorder()),\r\n                      keyboardType: TextInputType.number,\r\n                      validator: (v) {\r\n                        if (v == null || v.trim().isEmpty) return 'Required';\r\n                        if (int.tryParse(v.trim()) == null || int.parse(v.trim()) <= 0) return 'Invalid';\r\n                        return null;\r\n                      },\r\n                    ),\r\n                  ),\r\n                  SizedBox(width: 10),\r\n                  ElevatedButton(\r\n                    onPressed: () {\r\n                      // Basic validation for demo, ideally use a Form widget\r\n                      if (_classroomNameController.text.isNotEmpty &&\r\n                          _classroomCapacityController.text.isNotEmpty &&\r\n                          int.tryParse(_classroomCapacityController.text) != null &&\r\n                          int.parse(_classroomCapacityController.text) > 0) {\r\n                        scheduler.addClassroom(\r\n                          _classroomNameController.text,\r\n                          int.parse(_classroomCapacityController.text),\r\n                        );\r\n                        _classroomNameController.clear();\r\n                        _classroomCapacityController.clear();\r\n                        _showSnackbar('Classroom added');\r\n                      } else {\r\n                        _showSnackbar('Invalid classroom input');\r\n                      }\r\n                    },\r\n                    child: Text('Add'),\r\n                  ),\r\n                ],\r\n              ),\r\n            ),\r\n            Divider(height: 30, thickness: 1),\r\n\r\n            // --- Timeslots Section ---\r\n             _buildListSection<String>(\r\n              title: 'Timeslots (${scheduler.timeslots.length})',\r\n              items: scheduler.timeslots,\r\n              itemBuilder: (timeslot) => Card(child: ListTile(title: Text(timeslot))),\r\n            ),\r\n            _buildTextFieldWithButton(\r\n              controller: _timeslotController,\r\n              labelText: 'Timeslot (e.g., Mon 09:00-10:00)',\r\n              buttonText: 'Add Timeslot',\r\n              onButtonPressed: () {\r\n                scheduler.addTimeslot(_timeslotController.text);\r\n                 _showSnackbar('Timeslot added');\r\n              },\r\n            ),\r\n            Divider(height: 30, thickness: 1),\r\n\r\n            // --- Create Subject Offering Section ---\r\n            ExpansionTile(\r\n              title: Text('Create Subject Offering (${scheduler.subjectOfferingsToSchedule.length} queued)', style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),\r\n              initiallyExpanded: true,\r\n              children: [\r\n                if (scheduler.courses.isNotEmpty)\r\n                  DropdownButtonFormField<Course>(\r\n                    decoration: InputDecoration(labelText: 'Select Course', border: OutlineInputBorder()),\r\n                    value: _selectedCourseForOffering,\r\n                    items: scheduler.courses.map((Course course) {\r\n                      return DropdownMenuItem<Course>(value: course, child: Text(course.name));\r\n                    }).toList(),\r\n                    onChanged: (Course? newValue) => setState(() => _selectedCourseForOffering = newValue),\r\n                    validator: (v) => v == null ? 'Required' : null,\r\n                  )\r\n                else\r\n                  Padding(padding: const EdgeInsets.all(8.0), child: Text('Add courses first.')),\r\n                SizedBox(height: 10),\r\n\r\n                if (scheduler.instructors.isNotEmpty)\r\n                  DropdownButtonFormField<Instructor>(\r\n                    decoration: InputDecoration(labelText: 'Select Instructor', border: OutlineInputBorder()),\r\n                    value: _selectedInstructorForOffering,\r\n                    items: scheduler.instructors.map((Instructor i) {\r\n                      return DropdownMenuItem<Instructor>(value: i, child: Text(i.name));\r\n                    }).toList(),\r\n                    onChanged: (Instructor? newValue) => setState(() => _selectedInstructorForOffering = newValue),\r\n                     validator: (v) => v == null ? 'Required' : null,\r\n                  )\r\n                else\r\n                   Padding(padding: const EdgeInsets.all(8.0), child: Text('Add instructors first.')),\r\n                SizedBox(height: 10),\r\n\r\n                Text('Select Students for Offering (Optional):', style: TextStyle(fontSize: 16)),\r\n                if (scheduler.students.isNotEmpty)\r\n                  Container(\r\n                    height: 150, // Constrain height\r\n                    decoration: BoxDecoration(border: Border.all(color: Colors.grey)),\r\n                    child: ListView(\r\n                      children: scheduler.students.map((student) {\r\n                        return CheckboxListTile(\r\n                          title: Text(student.name),\r\n                          value: _selectedStudentsForOffering.contains(student),\r\n                          onChanged: (bool? selected) {\r\n                            setState(() {\r\n                              if (selected == true) {\r\n                                _selectedStudentsForOffering.add(student);\r\n                              } else {\r\n                                _selectedStudentsForOffering.remove(student);\r\n                              }\r\n                            });\r\n                          },\r\n                        );\r\n                      }).toList(),\r\n                    ),\r\n                  )\r\n                else\r\n                  Padding(padding: const EdgeInsets.all(8.0), child: Text('Add students to select them.')),\r\n                SizedBox(height: 10),\r\n                ElevatedButton(\r\n                  onPressed: () {\r\n                    if (_selectedCourseForOffering != null && _selectedInstructorForOffering != null) {\r\n                      scheduler.addSubjectOffering(\r\n                        _selectedCourseForOffering!,\r\n                        _selectedInstructorForOffering!,\r\n                        _selectedStudentsForOffering.toList(),\r\n                      );\r\n                      setState(() { // Reset form fields for offering\r\n                        _selectedCourseForOffering = null;\r\n                        _selectedInstructorForOffering = null;\r\n                        _selectedStudentsForOffering.clear();\r\n                      });\r\n                      _showSnackbar('Offering added to queue');\r\n                    } else {\r\n                       _showSnackbar('Please select course and instructor for offering.');\r\n                    }\r\n                  },\r\n                  child: Text('Add Offering to Queue'),\r\n                ),\r\n                SizedBox(height: 10),\r\n                 _buildListSection<SubjectOffering>(\r\n                  title: 'Queued Offerings',\r\n                  items: scheduler.subjectOfferingsToSchedule,\r\n                  itemBuilder: (offering) => Card(\r\n                    child: ListTile(\r\n                      title: Text('${offering.course.name} by ${offering.instructor.name}'),\r\n                      subtitle: Text('Students: ${offering.studentsSummary}'),\r\n                    ),\r\n                  ),\r\n                ),\r\n              ],\r\n            ),\r\n            Divider(height: 30, thickness: 1),\r\n\r\n            // --- Run Scheduler and View Schedule ---\r\n            ElevatedButton.icon(\r\n              icon: Icon(Icons.schedule_send),\r\n              label: Text('RUN SCHEDULER'),\r\n              style: ElevatedButton.styleFrom(\r\n                padding: EdgeInsets.symmetric(vertical: 15),\r\n                backgroundColor: Theme.of(context).colorScheme.primary,\r\n                foregroundColor: Theme.of(context).colorScheme.onPrimary,\r\n              ),\r\n              onPressed: () async {\r\n                final result = scheduler.runScheduler();\r\n                final unscheduledMessages = scheduler.unscheduledMessages;\r\n\r\n                await showDialog(\r\n                  context: context,\r\n                  builder: (ctx) => AlertDialog(\r\n                    title: Text('Scheduler Run Complete'),\r\n                    content: SingleChildScrollView(\r\n                      child: ListBody(\r\n                        children: <Widget>[\r\n                          Text('Scheduled ${result['scheduled']} out of ${result['total']} offerings.'),\r\n                          if (unscheduledMessages.isNotEmpty) ...[\r\n                            SizedBox(height: 10),\r\n                            Text('Details for Unscheduled:', style: TextStyle(fontWeight: FontWeight.bold)),\r\n                            ...unscheduledMessages.map((msg) => Padding(\r\n                              padding: const EdgeInsets.only(top:4.0),\r\n                              child: Text('- $msg', style: TextStyle(fontSize: 12)),\r\n                            )),\r\n                          ]\r\n                        ],\r\n                      ),\r\n                    ),\r\n                    actions: <Widget>[TextButton(child: Text('OK'), onPressed: () => Navigator.of(ctx).pop())],\r\n                  ),\r\n                );\r\n              },\r\n            ),\r\n            SizedBox(height: 20),\r\n            _buildListSection<ScheduledClass>(\r\n              title: 'Final Schedule (${scheduler.finalSchedule.length})',\r\n              initiallyExpanded: true, // Often want to see this\r\n              items: scheduler.finalSchedule,\r\n              itemBuilder: (scheduledClass) => Card(\r\n                elevation: 2,\r\n                margin: EdgeInsets.symmetric(vertical: 8.0),\r\n                child: Padding(\r\n                  padding: const EdgeInsets.all(12.0),\r\n                  child: Column(\r\n                    crossAxisAlignment: CrossAxisAlignment.start,\r\n                    children: [\r\n                      Text(scheduledClass.courseName, style: Theme.of(context).textTheme.titleLarge),\r\n                      SizedBox(height: 4),\r\n                      Text('Instructor: ${scheduledClass.instructorName}'),\r\n                      Text('Classroom: ${scheduledClass.classroomName}'),\r\n                      Text('Timeslot: ${scheduledClass.timeslot}'),\r\n                      SizedBox(height: 4),\r\n                      Text('Students: ${scheduledClass.studentNames.join(', ')}'),\r\n                      Text('Offering ID: ${scheduledClass.offeringId}', style: TextStyle(fontSize: 10, color: Colors.grey)),\r\n                    ],\r\n                  ),\r\n                ),\r\n              ),\r\n            ),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n}"
        }
    ]
}