{
    "sourceFile": "timetable1.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1747021846314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1747021853911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,451 @@\n+import 'dart:io';\r\n+\r\n+// --- DATA STRUCTURES ---\r\n+\r\n+class Student {\r\n+  int id;\r\n+  String name;\r\n+\r\n+  Student(this.id, this.name);\r\n+\r\n+  @override\r\n+  String toString() => \"ID: $id, Name: $name\";\r\n+}\r\n+\r\n+class Instructor {\r\n+  int id;\r\n+  String name;\r\n+\r\n+  Instructor(this.id, this.name);\r\n+\r\n+  @override\r\n+  String toString() => \"ID: $id, Name: $name\";\r\n+}\r\n+\r\n+// Represents the general course, e.g., \"CS101\"\r\n+class Course {\r\n+  int id;\r\n+  String name;\r\n+\r\n+  Course(this.id, this.name);\r\n+\r\n+  @override\r\n+  String toString() => \"ID: $id, Name: $name\";\r\n+}\r\n+\r\n+class Classroom {\r\n+  int id;\r\n+  String name;\r\n+  int capacity;\r\n+\r\n+  Classroom(this.id, this.name, this.capacity);\r\n+\r\n+  @override\r\n+  String toString() => \"ID: $id, Name: $name, Capacity: $capacity\";\r\n+}\r\n+\r\n+// This is what we actually try to schedule\r\n+class SubjectOffering {\r\n+  int id;\r\n+  Course course;\r\n+  Instructor instructor;\r\n+  List<Student> studentsEnrolled;\r\n+\r\n+  SubjectOffering(this.id, this.course, this.instructor, this.studentsEnrolled);\r\n+\r\n+  @override\r\n+  String toString() {\r\n+    var studentNames = studentsEnrolled.map((s) => s.name).join(', ');\r\n+    if (studentNames.isEmpty) studentNames = \"None\";\r\n+    return \"Offering ID: $id, Course: ${course.name}, Instructor: ${instructor.name}, Students: $studentNames\";\r\n+  }\r\n+}\r\n+\r\n+class ScheduledClass {\r\n+  int offeringId;\r\n+  String courseName;\r\n+  String instructorName;\r\n+  List<String> studentNames;\r\n+  String classroomName;\r\n+  String timeslot;\r\n+\r\n+  ScheduledClass(this.offeringId, this.courseName, this.instructorName,\r\n+      this.studentNames, this.classroomName, this.timeslot);\r\n+\r\n+  @override\r\n+  String toString() {\r\n+    return \"\"\"\r\n+  Offering ID: $offeringId\r\n+    Course:     $courseName\r\n+    Instructor: $instructorName\r\n+    Classroom:  $classroomName\r\n+    Timeslot:   $timeslot\r\n+    Students:   ${studentNames.join(', ')}\r\n+    --------------------\"\"\";\r\n+  }\r\n+}\r\n+\r\n+class TimetableScheduler {\r\n+  final List<Student> _students = [];\r\n+  final List<Instructor> _instructors = [];\r\n+  final List<Course> _courses = [];\r\n+  final List<Classroom> _classrooms = [];\r\n+  final List<String> _timeslots = [];\r\n+\r\n+  final List<SubjectOffering> _subjectOfferingsToSchedule = [];\r\n+  List<ScheduledClass> _finalSchedule = []; // Modifiable\r\n+\r\n+  int _nextStudentId = 1;\r\n+  int _nextInstructorId = 1;\r\n+  int _nextCourseId = 1;\r\n+  int _nextClassroomId = 1;\r\n+  int _nextOfferingId = 1;\r\n+\r\n+  // --- Helper Methods ---\r\n+  String _prompt(String message) {\r\n+    stdout.write(message);\r\n+    return stdin.readLineSync() ?? \"\";\r\n+  }\r\n+\r\n+  int _generateIdFor(String type) {\r\n+    switch (type) {\r\n+      case 'student':\r\n+        return _nextStudentId++;\r\n+      case 'instructor':\r\n+        return _nextInstructorId++;\r\n+      case 'course':\r\n+        return _nextCourseId++;\r\n+      case 'classroom':\r\n+        return _nextClassroomId++;\r\n+      case 'offering':\r\n+        return _nextOfferingId++;\r\n+      default:\r\n+        throw ArgumentError(\"Unknown type for ID generation: $type\");\r\n+    }\r\n+  }\r\n+\r\n+  T? _findById<T extends dynamic>(List<T> collection, int id) {\r\n+    // Assuming items in collection have an 'id' property\r\n+    try {\r\n+      return collection.firstWhere((item) => item.id == id);\r\n+    } catch (e) {\r\n+      return null; // Not found\r\n+    }\r\n+  }\r\n+\r\n+  void _displayList<T>(List<T> items, String title, String Function(T) formatter) {\r\n+    print(\"\\n--- $title ---\");\r\n+    if (items.isEmpty) {\r\n+      print(\"No ${title.toLowerCase()} available.\");\r\n+    } else {\r\n+      items.asMap().forEach((index, item) {\r\n+        // Using item.id if available, otherwise index\r\n+        String prefix = \"\";\r\n+        try {\r\n+          prefix = \"${(item as dynamic).id}. \";\r\n+        } catch (e) {\r\n+          prefix = \"${index + 1}. \";\r\n+        }\r\n+        print(prefix + formatter(item));\r\n+      });\r\n+    }\r\n+    print(\"-------------------\");\r\n+  }\r\n+\r\n+\r\n+  // --- Add Methods ---\r\n+  void addStudent() {\r\n+    String name = _prompt(\"Enter student name: \");\r\n+    if (name.isEmpty) {\r\n+      print(\"Student name cannot be empty.\");\r\n+      return;\r\n+    }\r\n+    var student = Student(_generateIdFor('student'), name);\r\n+    _students.add(student);\r\n+    print(\"Student '${student.name}' (ID: ${student.id}) added.\");\r\n+  }\r\n+\r\n+  void addInstructor() {\r\n+    String name = _prompt(\"Enter instructor name: \");\r\n+     if (name.isEmpty) {\r\n+      print(\"Instructor name cannot be empty.\");\r\n+      return;\r\n+    }\r\n+    var instructor = Instructor(_generateIdFor('instructor'), name);\r\n+    _instructors.add(instructor);\r\n+    print(\"Instructor '${instructor.name}' (ID: ${instructor.id}) added.\");\r\n+  }\r\n+\r\n+  void addCourse() {\r\n+    String name = _prompt(\"Enter course name (e.g., CS101 - Intro to Programming): \");\r\n+     if (name.isEmpty) {\r\n+      print(\"Course name cannot be empty.\");\r\n+      return;\r\n+    }\r\n+    var course = Course(_generateIdFor('course'), name);\r\n+    _courses.add(course);\r\n+    print(\"Course '${course.name}' (ID: ${course.id}) added.\");\r\n+  }\r\n+\r\n+  void addClassroom() {\r\n+    String name = _prompt(\"Enter classroom name (e.g., Room A101): \");\r\n+    if (name.isEmpty) {\r\n+      print(\"Classroom name cannot be empty.\");\r\n+      return;\r\n+    }\r\n+    String capacityStr = _prompt(\"Enter classroom capacity: \");\r\n+    int? capacity = int.tryParse(capacityStr);\r\n+    if (capacity == null || capacity <= 0) {\r\n+      print(\"Invalid capacity. Please enter a positive number.\");\r\n+      return;\r\n+    }\r\n+    var classroom = Classroom(_generateIdFor('classroom'), name, capacity);\r\n+    _classrooms.add(classroom);\r\n+    print(\"Classroom '${classroom.name}' (Capacity: ${classroom.capacity}, ID: ${classroom.id}) added.\");\r\n+  }\r\n+\r\n+  void addTimeslot() {\r\n+    String timeslotStr = _prompt(\"Enter timeslot (e.g., Mon 09:00-10:00): \");\r\n+    if (timeslotStr.isEmpty) {\r\n+      print(\"Timeslot cannot be empty.\");\r\n+      return;\r\n+    }\r\n+    if (_timeslots.contains(timeslotStr)) {\r\n+      print(\"Timeslot already exists.\");\r\n+    } else {\r\n+      _timeslots.add(timeslotStr);\r\n+      print(\"Timeslot '$timeslotStr' added.\");\r\n+    }\r\n+  }\r\n+\r\n+  void addSubjectOfferingToSchedule() {\r\n+    if (_courses.isEmpty) {\r\n+      print(\"Please add courses first.\");\r\n+      return;\r\n+    }\r\n+    if (_instructors.isEmpty) {\r\n+      print(\"Please add instructors first.\");\r\n+      return;\r\n+    }\r\n+\r\n+    _displayList(_courses, \"Available Courses\", (c) => c.name);\r\n+    String courseIdStr = _prompt(\"Enter Course ID to offer: \");\r\n+    int? courseId = int.tryParse(courseIdStr);\r\n+    Course? course = courseId != null ? _findById(_courses, courseId) : null;\r\n+    if (course == null) {\r\n+      print(\"Invalid Course ID.\");\r\n+      return;\r\n+    }\r\n+\r\n+    _displayList(_instructors, \"Available Instructors\", (i) => i.name);\r\n+    String instructorIdStr = _prompt(\"Enter Instructor ID for this offering: \");\r\n+    int? instructorId = int.tryParse(instructorIdStr);\r\n+    Instructor? instructor = instructorId != null ? _findById(_instructors, instructorId) : null;\r\n+    if (instructor == null) {\r\n+      print(\"Invalid Instructor ID.\");\r\n+      return;\r\n+    }\r\n+\r\n+    List<Student> enrolledStudentsList = [];\r\n+    if (_students.isNotEmpty) {\r\n+      while (true) {\r\n+        _displayList(_students, \"Available Students\", (s) => s.name);\r\n+        _displayList(enrolledStudentsList, \"Currently Enrolled for this Offering\", (s) => s.name);\r\n+        String studentInput = _prompt(\"Enter Student ID to enroll (or type 'done'): \");\r\n+        if (studentInput.toLowerCase() == 'done') break;\r\n+\r\n+        int? studentId = int.tryParse(studentInput);\r\n+        Student? student = studentId != null ? _findById(_students, studentId) : null;\r\n+\r\n+        if (student != null && !enrolledStudentsList.contains(student)) {\r\n+          enrolledStudentsList.add(student);\r\n+          print(\"${student.name} added to this offering.\");\r\n+        } else if (enrolledStudentsList.contains(student)) {\r\n+          print(\"${student?.name} is already added.\");\r\n+        } else {\r\n+          print(\"Invalid Student ID.\");\r\n+        }\r\n+      }\r\n+    } else {\r\n+      print(\"No students available to enroll. Offering will have 0 students for now.\");\r\n+    }\r\n+\r\n+    var offering = SubjectOffering(\r\n+        _generateIdFor('offering'), course, instructor, enrolledStudentsList);\r\n+    _subjectOfferingsToSchedule.add(offering);\r\n+    print(\r\n+        \"Subject Offering '${course.name}' by '${instructor.name}' (ID: ${offering.id}) added to scheduling queue.\");\r\n+  }\r\n+\r\n+  // --- View Methods ---\r\n+  void viewStudents() => _displayList(_students, \"Students\", (s) => s.name);\r\n+  void viewInstructors() => _displayList(_instructors, \"Instructors\", (i) => i.name);\r\n+  void viewCourses() => _displayList(_courses, \"Courses\", (c) => c.name);\r\n+  void viewClassrooms() => _displayList(_classrooms, \"Classrooms\", (c) => \"${c.name} (Capacity: ${c.capacity})\");\r\n+  void viewTimeslots() => _displayList(_timeslots, \"Available Timeslots\", (ts) => ts);\r\n+\r\n+  void viewOfferingsToSchedule() {\r\n+    _displayList(_subjectOfferingsToSchedule, \"Offerings Queued for Scheduling\", (offering) {\r\n+      var studentNames = offering.studentsEnrolled.map((s) => s.name).join(', ');\r\n+      studentNames = studentNames.isEmpty ? \"None\" : studentNames;\r\n+      return \"${offering.course.name} - Instructor: ${offering.instructor.name} - Students: $studentNames\";\r\n+    });\r\n+  }\r\n+\r\n+  void viewFinalSchedule() {\r\n+    print(\"\\n--- FINAL SCHEDULE ---\");\r\n+    if (_finalSchedule.isEmpty) {\r\n+      print(\"No classes have been scheduled yet, or scheduling failed.\");\r\n+    } else {\r\n+      _finalSchedule.forEach(print); // Uses ScheduledClass.toString()\r\n+    }\r\n+    print(\"--------------------\");\r\n+  }\r\n+\r\n+  // --- Scheduling Logic ---\r\n+  String? _checkForConflicts(SubjectOffering offeringToCheck, Classroom classroom, String timeslot) {\r\n+    // 1. Classroom availability\r\n+    if (_finalSchedule.any((sc) => sc.classroomName == classroom.name && sc.timeslot == timeslot)) {\r\n+      return \"Conflict: Classroom ${classroom.name} busy at $timeslot.\";\r\n+    }\r\n+\r\n+    // 2. Instructor availability\r\n+    if (_finalSchedule.any((sc) => sc.instructorName == offeringToCheck.instructor.name && sc.timeslot == timeslot)) {\r\n+      return \"Conflict: Instructor ${offeringToCheck.instructor.name} busy at $timeslot.\";\r\n+    }\r\n+\r\n+    // 3. Student availability\r\n+    for (var student in offeringToCheck.studentsEnrolled) {\r\n+      if (_finalSchedule.any((sc) => sc.studentNames.contains(student.name) && sc.timeslot == timeslot)) {\r\n+        return \"Conflict: Student ${student.name} busy at $timeslot.\";\r\n+      }\r\n+    }\r\n+\r\n+    // 4. Classroom capacity\r\n+    if (offeringToCheck.studentsEnrolled.length > classroom.capacity) {\r\n+      return \"Conflict: Classroom ${classroom.name} capacity (${classroom.capacity}) too small for ${offeringToCheck.studentsEnrolled.length} students.\";\r\n+    }\r\n+    \r\n+    // 5. Offering ID already scheduled (should not happen if logic is correct elsewhere but good check)\r\n+    if (_finalSchedule.any((sc) => sc.offeringId == offeringToCheck.id)) {\r\n+        return \"Error: Offering ID ${offeringToCheck.id} is somehow already in the final schedule.\";\r\n+    }\r\n+\r\n+    return null; // No conflicts\r\n+  }\r\n+\r\n+  void runScheduler() {\r\n+    if (_subjectOfferingsToSchedule.isEmpty) {\r\n+      print(\"No subject offerings in the queue to schedule. Please add some first.\");\r\n+      return;\r\n+    }\r\n+    if (_classrooms.isEmpty) {\r\n+      print(\"No classrooms available. Please add classrooms first.\");\r\n+      return;\r\n+    }\r\n+    if (_timeslots.isEmpty) {\r\n+      print(\"No timeslots available. Please add timeslots first.\");\r\n+      return;\r\n+    }\r\n+\r\n+    print(\"\\n--- Running Scheduler ---\");\r\n+    _finalSchedule.clear(); // Clear previous schedule\r\n+\r\n+    Set<int> processedOfferingIds = {}; // To avoid processing the same offering multiple times\r\n+\r\n+    for (var currentOffering in _subjectOfferingsToSchedule) {\r\n+      if (processedOfferingIds.contains(currentOffering.id)) {\r\n+        print(\"Skipping already processed offering ID: ${currentOffering.id}\");\r\n+        continue;\r\n+      }\r\n+\r\n+      print(\"\\nAttempting to schedule: ${currentOffering.course.name} (Instructor: ${currentOffering.instructor.name}, Offering ID: ${currentOffering.id})\");\r\n+      bool scheduledThisOffering = false;\r\n+\r\n+      for (var classroom in _classrooms) {\r\n+        for (var timeslot in _timeslots) {\r\n+          String? conflictReason = _checkForConflicts(currentOffering, classroom, timeslot);\r\n+\r\n+          if (conflictReason != null) {\r\n+            // print(\"    $conflictReason\"); // Verbose logging for debugging\r\n+            continue;\r\n+          } else {\r\n+            var newScheduledClass = ScheduledClass(\r\n+              currentOffering.id,\r\n+              currentOffering.course.name,\r\n+              currentOffering.instructor.name,\r\n+              currentOffering.studentsEnrolled.map((s) => s.name).toList(),\r\n+              classroom.name,\r\n+              timeslot,\r\n+            );\r\n+            _finalSchedule.add(newScheduledClass);\r\n+            scheduledThisOffering = true;\r\n+            processedOfferingIds.add(currentOffering.id);\r\n+            print(\"  SUCCESS: Scheduled ${currentOffering.course.name} in ${classroom.name} at $timeslot\");\r\n+            break; // Break from TIMESLOTS loop\r\n+          }\r\n+        } // End TIMESLOTS loop\r\n+        if (scheduledThisOffering) break; // Break from CLASSROOMS loop\r\n+      } // End CLASSROOMS loop\r\n+\r\n+      if (!scheduledThisOffering) {\r\n+        print(\"  FAILURE: Could not find a suitable slot for ${currentOffering.course.name} (ID: ${currentOffering.id}).\");\r\n+      }\r\n+    }\r\n+    print(\"--- Scheduler Finished ---\");\r\n+    viewFinalSchedule();\r\n+  }\r\n+\r\n+  // --- Main Menu ---\r\n+  void mainMenu() {\r\n+    while (true) {\r\n+      print(\"\\n===== Timetable Scheduler Menu (Dart) =====\");\r\n+      print(\"1. Add Student\");\r\n+      print(\"2. Add Instructor\");\r\n+      print(\"3. Add Course (e.g., Math 101)\");\r\n+      print(\"4. Add Classroom\");\r\n+      print(\"5. Add Timeslot\");\r\n+      print(\"6. Create Subject Offering (to be scheduled)\");\r\n+      print(\"------------------------------------\");\r\n+      print(\"7. View Students\");\r\n+      print(\"8. View Instructors\");\r\n+      print(\"9. View Courses\");\r\n+      print(\"10. View Classrooms\");\r\n+      print(\"11. View Timeslots\");\r\n+      print(\"12. View Offerings Queued for Scheduling\");\r\n+      print(\"------------------------------------\");\r\n+      print(\"13. RUN SCHEDULER\");\r\n+      print(\"14. View Final Schedule\");\r\n+      print(\"------------------------------------\");\r\n+      print(\"0. Exit\");\r\n+      String choice = _prompt(\"Enter your choice: \");\r\n+\r\n+      switch (choice) {\r\n+        case '1': addStudent(); break;\r\n+        case '2': addInstructor(); break;\r\n+        case '3': addCourse(); break;\r\n+        case '4': addClassroom(); break;\r\n+        case '5': addTimeslot(); break;\r\n+        case '6': addSubjectOfferingToSchedule(); break;\r\n+        case '7': viewStudents(); break;\r\n+        case '8': viewInstructors(); break;\r\n+        case '9': viewCourses(); break;\r\n+        case '10': viewClassrooms(); break;\r\n+        case '11': viewTimeslots(); break;\r\n+        case '12': viewOfferingsToSchedule(); break;\r\n+        case '13': runScheduler(); break;\r\n+        case '14': viewFinalSchedule(); break;\r\n+        case '0':\r\n+          print(\"Exiting. Goodbye!\");\r\n+          return; // Exit the loop and method\r\n+        default:\r\n+          print(\"Invalid choice. Please try again.\");\r\n+      }\r\n+    }\r\n+  }\r\n+}\r\n+\r\n+void main() {\r\n+  var schedulerApp = TimetableScheduler();\r\n+  schedulerApp.mainMenu();\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747022311810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,451 @@\n+import 'dart:io';\r\n+\r\n+// --- DATA STRUCTURES ---\r\n+\r\n+class Student {\r\n+  int id;\r\n+  String name;\r\n+\r\n+  Student(this.id, this.name);\r\n+\r\n+  @override\r\n+  String toString() => \"ID: $id, Name: $name\";\r\n+}\r\n+\r\n+class Instructor {\r\n+  int id;\r\n+  String name;\r\n+\r\n+  Instructor(this.id, this.name);\r\n+\r\n+  @override\r\n+  String toString() => \"ID: $id, Name: $name\";\r\n+}\r\n+\r\n+// Represents the general course, e.g., \"CS101\"\r\n+class Course {\r\n+  int id;\r\n+  String name;\r\n+\r\n+  Course(this.id, this.name);\r\n+\r\n+  @override\r\n+  String toString() => \"ID: $id, Name: $name\";\r\n+}\r\n+\r\n+class Classroom {\r\n+  int id;\r\n+  String name;\r\n+  int capacity;\r\n+\r\n+  Classroom(this.id, this.name, this.capacity);\r\n+\r\n+  @override\r\n+  String toString() => \"ID: $id, Name: $name, Capacity: $capacity\";\r\n+}\r\n+\r\n+// This is what we actually try to schedule\r\n+class SubjectOffering {\r\n+  int id;\r\n+  Course course;\r\n+  Instructor instructor;\r\n+  List<Student> studentsEnrolled;\r\n+\r\n+  SubjectOffering(this.id, this.course, this.instructor, this.studentsEnrolled);\r\n+\r\n+  @override\r\n+  String toString() {\r\n+    var studentNames = studentsEnrolled.map((s) => s.name).join(', ');\r\n+    if (studentNames.isEmpty) studentNames = \"None\";\r\n+    return \"Offering ID: $id, Course: ${course.name}, Instructor: ${instructor.name}, Students: $studentNames\";\r\n+  }\r\n+}\r\n+\r\n+class ScheduledClass {\r\n+  int offeringId;\r\n+  String courseName;\r\n+  String instructorName;\r\n+  List<String> studentNames;\r\n+  String classroomName;\r\n+  String timeslot;\r\n+\r\n+  ScheduledClass(this.offeringId, this.courseName, this.instructorName,\r\n+      this.studentNames, this.classroomName, this.timeslot);\r\n+\r\n+  @override\r\n+  String toString() {\r\n+    return \"\"\"\r\n+  Offering ID: $offeringId\r\n+    Course:     $courseName\r\n+    Instructor: $instructorName\r\n+    Classroom:  $classroomName\r\n+    Timeslot:   $timeslot\r\n+    Students:   ${studentNames.join(', ')}\r\n+    --------------------\"\"\";\r\n+  }\r\n+}\r\n+\r\n+class TimetableScheduler {\r\n+  final List<Student> _students = [];\r\n+  final List<Instructor> _instructors = [];\r\n+  final List<Course> _courses = [];\r\n+  final List<Classroom> _classrooms = [];\r\n+  final List<String> _timeslots = [];\r\n+\r\n+  final List<SubjectOffering> _subjectOfferingsToSchedule = [];\r\n+  List<ScheduledClass> _finalSchedule = []; // Modifiable\r\n+\r\n+  int _nextStudentId = 1;\r\n+  int _nextInstructorId = 1;\r\n+  int _nextCourseId = 1;\r\n+  int _nextClassroomId = 1;\r\n+  int _nextOfferingId = 1;\r\n+\r\n+  // --- Helper Methods ---\r\n+  String _prompt(String message) {\r\n+    stdout.write(message);\r\n+    return stdin.readLineSync() ?? \"\";\r\n+  }\r\n+\r\n+  int _generateIdFor(String type) {\r\n+    switch (type) {\r\n+      case 'student':\r\n+        return _nextStudentId++;\r\n+      case 'instructor':\r\n+        return _nextInstructorId++;\r\n+      case 'course':\r\n+        return _nextCourseId++;\r\n+      case 'classroom':\r\n+        return _nextClassroomId++;\r\n+      case 'offering':\r\n+        return _nextOfferingId++;\r\n+      default:\r\n+        throw ArgumentError(\"Unknown type for ID generation: $type\");\r\n+    }\r\n+  }\r\n+\r\n+  T? _findById<T extends dynamic>(List<T> collection, int id) {\r\n+    // Assuming items in collection have an 'id' property\r\n+    try {\r\n+      return collection.firstWhere((item) => item.id == id);\r\n+    } catch (e) {\r\n+      return null; // Not found\r\n+    }\r\n+  }\r\n+\r\n+  void _displayList<T>(List<T> items, String title, String Function(T) formatter) {\r\n+    print(\"\\n--- $title ---\");\r\n+    if (items.isEmpty) {\r\n+      print(\"No ${title.toLowerCase()} available.\");\r\n+    } else {\r\n+      items.asMap().forEach((index, item) {\r\n+        // Using item.id if available, otherwise index\r\n+        String prefix = \"\";\r\n+        try {\r\n+          prefix = \"${(item as dynamic).id}. \";\r\n+        } catch (e) {\r\n+          prefix = \"${index + 1}. \";\r\n+        }\r\n+        print(prefix + formatter(item));\r\n+      });\r\n+    }\r\n+    print(\"-------------------\");\r\n+  }\r\n+\r\n+\r\n+  // --- Add Methods ---\r\n+  void addStudent() {\r\n+    String name = _prompt(\"Enter student name: \");\r\n+    if (name.isEmpty) {\r\n+      print(\"Student name cannot be empty.\");\r\n+      return;\r\n+    }\r\n+    var student = Student(_generateIdFor('student'), name);\r\n+    _students.add(student);\r\n+    print(\"Student '${student.name}' (ID: ${student.id}) added.\");\r\n+  }\r\n+\r\n+  void addInstructor() {\r\n+    String name = _prompt(\"Enter instructor name: \");\r\n+     if (name.isEmpty) {\r\n+      print(\"Instructor name cannot be empty.\");\r\n+      return;\r\n+    }\r\n+    var instructor = Instructor(_generateIdFor('instructor'), name);\r\n+    _instructors.add(instructor);\r\n+    print(\"Instructor '${instructor.name}' (ID: ${instructor.id}) added.\");\r\n+  }\r\n+\r\n+  void addCourse() {\r\n+    String name = _prompt(\"Enter course name (e.g., CS101 - Intro to Programming): \");\r\n+     if (name.isEmpty) {\r\n+      print(\"Course name cannot be empty.\");\r\n+      return;\r\n+    }\r\n+    var course = Course(_generateIdFor('course'), name);\r\n+    _courses.add(course);\r\n+    print(\"Course '${course.name}' (ID: ${course.id}) added.\");\r\n+  }\r\n+\r\n+  void addClassroom() {\r\n+    String name = _prompt(\"Enter classroom name (e.g., Room A101): \");\r\n+    if (name.isEmpty) {\r\n+      print(\"Classroom name cannot be empty.\");\r\n+      return;\r\n+    }\r\n+    String capacityStr = _prompt(\"Enter classroom capacity: \");\r\n+    int? capacity = int.tryParse(capacityStr);\r\n+    if (capacity == null || capacity <= 0) {\r\n+      print(\"Invalid capacity. Please enter a positive number.\");\r\n+      return;\r\n+    }\r\n+    var classroom = Classroom(_generateIdFor('classroom'), name, capacity);\r\n+    _classrooms.add(classroom);\r\n+    print(\"Classroom '${classroom.name}' (Capacity: ${classroom.capacity}, ID: ${classroom.id}) added.\");\r\n+  }\r\n+\r\n+  void addTimeslot() {\r\n+    String timeslotStr = _prompt(\"Enter timeslot (e.g., Mon 09:00-10:00): \");\r\n+    if (timeslotStr.isEmpty) {\r\n+      print(\"Timeslot cannot be empty.\");\r\n+      return;\r\n+    }\r\n+    if (_timeslots.contains(timeslotStr)) {\r\n+      print(\"Timeslot already exists.\");\r\n+    } else {\r\n+      _timeslots.add(timeslotStr);\r\n+      print(\"Timeslot '$timeslotStr' added.\");\r\n+    }\r\n+  }\r\n+\r\n+  void addSubjectOfferingToSchedule() {\r\n+    if (_courses.isEmpty) {\r\n+      print(\"Please add courses first.\");\r\n+      return;\r\n+    }\r\n+    if (_instructors.isEmpty) {\r\n+      print(\"Please add instructors first.\");\r\n+      return;\r\n+    }\r\n+\r\n+    _displayList(_courses, \"Available Courses\", (c) => c.name);\r\n+    String courseIdStr = _prompt(\"Enter Course ID to offer: \");\r\n+    int? courseId = int.tryParse(courseIdStr);\r\n+    Course? course = courseId != null ? _findById(_courses, courseId) : null;\r\n+    if (course == null) {\r\n+      print(\"Invalid Course ID.\");\r\n+      return;\r\n+    }\r\n+\r\n+    _displayList(_instructors, \"Available Instructors\", (i) => i.name);\r\n+    String instructorIdStr = _prompt(\"Enter Instructor ID for this offering: \");\r\n+    int? instructorId = int.tryParse(instructorIdStr);\r\n+    Instructor? instructor = instructorId != null ? _findById(_instructors, instructorId) : null;\r\n+    if (instructor == null) {\r\n+      print(\"Invalid Instructor ID.\");\r\n+      return;\r\n+    }\r\n+\r\n+    List<Student> enrolledStudentsList = [];\r\n+    if (_students.isNotEmpty) {\r\n+      while (true) {\r\n+        _displayList(_students, \"Available Students\", (s) => s.name);\r\n+        _displayList(enrolledStudentsList, \"Currently Enrolled for this Offering\", (s) => s.name);\r\n+        String studentInput = _prompt(\"Enter Student ID to enroll (or type 'done'): \");\r\n+        if (studentInput.toLowerCase() == 'done') break;\r\n+\r\n+        int? studentId = int.tryParse(studentInput);\r\n+        Student? student = studentId != null ? _findById(_students, studentId) : null;\r\n+\r\n+        if (student != null && !enrolledStudentsList.contains(student)) {\r\n+          enrolledStudentsList.add(student);\r\n+          print(\"${student.name} added to this offering.\");\r\n+        } else if (enrolledStudentsList.contains(student)) {\r\n+          print(\"${student?.name} is already added.\");\r\n+        } else {\r\n+          print(\"Invalid Student ID.\");\r\n+        }\r\n+      }\r\n+    } else {\r\n+      print(\"No students available to enroll. Offering will have 0 students for now.\");\r\n+    }\r\n+\r\n+    var offering = SubjectOffering(\r\n+        _generateIdFor('offering'), course, instructor, enrolledStudentsList);\r\n+    _subjectOfferingsToSchedule.add(offering);\r\n+    print(\r\n+        \"Subject Offering '${course.name}' by '${instructor.name}' (ID: ${offering.id}) added to scheduling queue.\");\r\n+  }\r\n+\r\n+  // --- View Methods ---\r\n+  void viewStudents() => _displayList(_students, \"Students\", (s) => s.name);\r\n+  void viewInstructors() => _displayList(_instructors, \"Instructors\", (i) => i.name);\r\n+  void viewCourses() => _displayList(_courses, \"Courses\", (c) => c.name);\r\n+  void viewClassrooms() => _displayList(_classrooms, \"Classrooms\", (c) => \"${c.name} (Capacity: ${c.capacity})\");\r\n+  void viewTimeslots() => _displayList(_timeslots, \"Available Timeslots\", (ts) => ts);\r\n+\r\n+  void viewOfferingsToSchedule() {\r\n+    _displayList(_subjectOfferingsToSchedule, \"Offerings Queued for Scheduling\", (offering) {\r\n+      var studentNames = offering.studentsEnrolled.map((s) => s.name).join(', ');\r\n+      studentNames = studentNames.isEmpty ? \"None\" : studentNames;\r\n+      return \"${offering.course.name} - Instructor: ${offering.instructor.name} - Students: $studentNames\";\r\n+    });\r\n+  }\r\n+\r\n+  void viewFinalSchedule() {\r\n+    print(\"\\n--- FINAL SCHEDULE ---\");\r\n+    if (_finalSchedule.isEmpty) {\r\n+      print(\"No classes have been scheduled yet, or scheduling failed.\");\r\n+    } else {\r\n+      _finalSchedule.forEach(print); // Uses ScheduledClass.toString()\r\n+    }\r\n+    print(\"--------------------\");\r\n+  }\r\n+\r\n+  // --- Scheduling Logic ---\r\n+  String? _checkForConflicts(SubjectOffering offeringToCheck, Classroom classroom, String timeslot) {\r\n+    // 1. Classroom availability\r\n+    if (_finalSchedule.any((sc) => sc.classroomName == classroom.name && sc.timeslot == timeslot)) {\r\n+      return \"Conflict: Classroom ${classroom.name} busy at $timeslot.\";\r\n+    }\r\n+\r\n+    // 2. Instructor availability\r\n+    if (_finalSchedule.any((sc) => sc.instructorName == offeringToCheck.instructor.name && sc.timeslot == timeslot)) {\r\n+      return \"Conflict: Instructor ${offeringToCheck.instructor.name} busy at $timeslot.\";\r\n+    }\r\n+\r\n+    // 3. Student availability\r\n+    for (var student in offeringToCheck.studentsEnrolled) {\r\n+      if (_finalSchedule.any((sc) => sc.studentNames.contains(student.name) && sc.timeslot == timeslot)) {\r\n+        return \"Conflict: Student ${student.name} busy at $timeslot.\";\r\n+      }\r\n+    }\r\n+\r\n+    // 4. Classroom capacity\r\n+    if (offeringToCheck.studentsEnrolled.length > classroom.capacity) {\r\n+      return \"Conflict: Classroom ${classroom.name} capacity (${classroom.capacity}) too small for ${offeringToCheck.studentsEnrolled.length} students.\";\r\n+    }\r\n+    \r\n+    // 5. Offering ID already scheduled (should not happen if logic is correct elsewhere but good check)\r\n+    if (_finalSchedule.any((sc) => sc.offeringId == offeringToCheck.id)) {\r\n+        return \"Error: Offering ID ${offeringToCheck.id} is somehow already in the final schedule.\";\r\n+    }\r\n+\r\n+    return null; // No conflicts\r\n+  }\r\n+\r\n+  void runScheduler() {\r\n+    if (_subjectOfferingsToSchedule.isEmpty) {\r\n+      print(\"No subject offerings in the queue to schedule. Please add some first.\");\r\n+      return;\r\n+    }\r\n+    if (_classrooms.isEmpty) {\r\n+      print(\"No classrooms available. Please add classrooms first.\");\r\n+      return;\r\n+    }\r\n+    if (_timeslots.isEmpty) {\r\n+      print(\"No timeslots available. Please add timeslots first.\");\r\n+      return;\r\n+    }\r\n+\r\n+    print(\"\\n--- Running Scheduler ---\");\r\n+    _finalSchedule.clear(); // Clear previous schedule\r\n+\r\n+    Set<int> processedOfferingIds = {}; // To avoid processing the same offering multiple times\r\n+\r\n+    for (var currentOffering in _subjectOfferingsToSchedule) {\r\n+      if (processedOfferingIds.contains(currentOffering.id)) {\r\n+        print(\"Skipping already processed offering ID: ${currentOffering.id}\");\r\n+        continue;\r\n+      }\r\n+\r\n+      print(\"\\nAttempting to schedule: ${currentOffering.course.name} (Instructor: ${currentOffering.instructor.name}, Offering ID: ${currentOffering.id})\");\r\n+      bool scheduledThisOffering = false;\r\n+\r\n+      for (var classroom in _classrooms) {\r\n+        for (var timeslot in _timeslots) {\r\n+          String? conflictReason = _checkForConflicts(currentOffering, classroom, timeslot);\r\n+\r\n+          if (conflictReason != null) {\r\n+            // print(\"    $conflictReason\"); // Verbose logging for debugging\r\n+            continue;\r\n+          } else {\r\n+            var newScheduledClass = ScheduledClass(\r\n+              currentOffering.id,\r\n+              currentOffering.course.name,\r\n+              currentOffering.instructor.name,\r\n+              currentOffering.studentsEnrolled.map((s) => s.name).toList(),\r\n+              classroom.name,\r\n+              timeslot,\r\n+            );\r\n+            _finalSchedule.add(newScheduledClass);\r\n+            scheduledThisOffering = true;\r\n+            processedOfferingIds.add(currentOffering.id);\r\n+            print(\"  SUCCESS: Scheduled ${currentOffering.course.name} in ${classroom.name} at $timeslot\");\r\n+            break; // Break from TIMESLOTS loop\r\n+          }\r\n+        } // End TIMESLOTS loop\r\n+        if (scheduledThisOffering) break; // Break from CLASSROOMS loop\r\n+      } // End CLASSROOMS loop\r\n+\r\n+      if (!scheduledThisOffering) {\r\n+        print(\"  FAILURE: Could not find a suitable slot for ${currentOffering.course.name} (ID: ${currentOffering.id}).\");\r\n+      }\r\n+    }\r\n+    print(\"--- Scheduler Finished ---\");\r\n+    viewFinalSchedule();\r\n+  }\r\n+\r\n+  // --- Main Menu ---\r\n+  void mainMenu() {\r\n+    while (true) {\r\n+      print(\"\\n===== Timetable Scheduler Menu (Dart) =====\");\r\n+      print(\"1. Add Student\");\r\n+      print(\"2. Add Instructor\");\r\n+      print(\"3. Add Course (e.g., Math 101)\");\r\n+      print(\"4. Add Classroom\");\r\n+      print(\"5. Add Timeslot\");\r\n+      print(\"6. Create Subject Offering (to be scheduled)\");\r\n+      print(\"------------------------------------\");\r\n+      print(\"7. View Students\");\r\n+      print(\"8. View Instructors\");\r\n+      print(\"9. View Courses\");\r\n+      print(\"10. View Classrooms\");\r\n+      print(\"11. View Timeslots\");\r\n+      print(\"12. View Offerings Queued for Scheduling\");\r\n+      print(\"------------------------------------\");\r\n+      print(\"13. RUN SCHEDULER\");\r\n+      print(\"14. View Final Schedule\");\r\n+      print(\"------------------------------------\");\r\n+      print(\"0. Exit\");\r\n+      String choice = _prompt(\"Enter your choice: \");\r\n+\r\n+      switch (choice) {\r\n+        case '1': addStudent(); break;\r\n+        case '2': addInstructor(); break;\r\n+        case '3': addCourse(); break;\r\n+        case '4': addClassroom(); break;\r\n+        case '5': addTimeslot(); break;\r\n+        case '6': addSubjectOfferingToSchedule(); break;\r\n+        case '7': viewStudents(); break;\r\n+        case '8': viewInstructors(); break;\r\n+        case '9': viewCourses(); break;\r\n+        case '10': viewClassrooms(); break;\r\n+        case '11': viewTimeslots(); break;\r\n+        case '12': viewOfferingsToSchedule(); break;\r\n+        case '13': runScheduler(); break;\r\n+        case '14': viewFinalSchedule(); break;\r\n+        case '0':\r\n+          print(\"Exiting. Goodbye!\");\r\n+          return; // Exit the loop and method\r\n+        default:\r\n+          print(\"Invalid choice. Please try again.\");\r\n+      }\r\n+    }\r\n+  }\r\n+}\r\n+\r\n+void main() {\r\n+  var schedulerApp = TimetableScheduler();\r\n+  schedulerApp.mainMenu();\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747022343295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -447,907 +447,5 @@\n \r\n void main() {\r\n   var schedulerApp = TimetableScheduler();\r\n   schedulerApp.mainMenu();\r\n-}\n-import 'dart:io';\r\n-\r\n-// --- DATA STRUCTURES ---\r\n-\r\n-class Student {\r\n-  int id;\r\n-  String name;\r\n-\r\n-  Student(this.id, this.name);\r\n-\r\n-  @override\r\n-  String toString() => \"ID: $id, Name: $name\";\r\n-}\r\n-\r\n-class Instructor {\r\n-  int id;\r\n-  String name;\r\n-\r\n-  Instructor(this.id, this.name);\r\n-\r\n-  @override\r\n-  String toString() => \"ID: $id, Name: $name\";\r\n-}\r\n-\r\n-// Represents the general course, e.g., \"CS101\"\r\n-class Course {\r\n-  int id;\r\n-  String name;\r\n-\r\n-  Course(this.id, this.name);\r\n-\r\n-  @override\r\n-  String toString() => \"ID: $id, Name: $name\";\r\n-}\r\n-\r\n-class Classroom {\r\n-  int id;\r\n-  String name;\r\n-  int capacity;\r\n-\r\n-  Classroom(this.id, this.name, this.capacity);\r\n-\r\n-  @override\r\n-  String toString() => \"ID: $id, Name: $name, Capacity: $capacity\";\r\n-}\r\n-\r\n-// This is what we actually try to schedule\r\n-class SubjectOffering {\r\n-  int id;\r\n-  Course course;\r\n-  Instructor instructor;\r\n-  List<Student> studentsEnrolled;\r\n-\r\n-  SubjectOffering(this.id, this.course, this.instructor, this.studentsEnrolled);\r\n-\r\n-  @override\r\n-  String toString() {\r\n-    var studentNames = studentsEnrolled.map((s) => s.name).join(', ');\r\n-    if (studentNames.isEmpty) studentNames = \"None\";\r\n-    return \"Offering ID: $id, Course: ${course.name}, Instructor: ${instructor.name}, Students: $studentNames\";\r\n-  }\r\n-}\r\n-\r\n-class ScheduledClass {\r\n-  int offeringId;\r\n-  String courseName;\r\n-  String instructorName;\r\n-  List<String> studentNames;\r\n-  String classroomName;\r\n-  String timeslot;\r\n-\r\n-  ScheduledClass(this.offeringId, this.courseName, this.instructorName,\r\n-      this.studentNames, this.classroomName, this.timeslot);\r\n-\r\n-  @override\r\n-  String toString() {\r\n-    return \"\"\"\r\n-  Offering ID: $offeringId\r\n-    Course:     $courseName\r\n-    Instructor: $instructorName\r\n-    Classroom:  $classroomName\r\n-    Timeslot:   $timeslot\r\n-    Students:   ${studentNames.join(', ')}\r\n-    --------------------\"\"\";\r\n-  }\r\n-}\r\n-\r\n-class TimetableScheduler {\r\n-  final List<Student> _students = [];\r\n-  final List<Instructor> _instructors = [];\r\n-  final List<Course> _courses = [];\r\n-  final List<Classroom> _classrooms = [];\r\n-  final List<String> _timeslots = [];\r\n-\r\n-  final List<SubjectOffering> _subjectOfferingsToSchedule = [];\r\n-  List<ScheduledClass> _finalSchedule = []; // Modifiable\r\n-\r\n-  int _nextStudentId = 1;\r\n-  int _nextInstructorId = 1;\r\n-  int _nextCourseId = 1;\r\n-  int _nextClassroomId = 1;\r\n-  int _nextOfferingId = 1;\r\n-\r\n-  // --- Helper Methods ---\r\n-  String _prompt(String message) {\r\n-    stdout.write(message);\r\n-    return stdin.readLineSync() ?? \"\";\r\n-  }\r\n-\r\n-  int _generateIdFor(String type) {\r\n-    switch (type) {\r\n-      case 'student':\r\n-        return _nextStudentId++;\r\n-      case 'instructor':\r\n-        return _nextInstructorId++;\r\n-      case 'course':\r\n-        return _nextCourseId++;\r\n-      case 'classroom':\r\n-        return _nextClassroomId++;\r\n-      case 'offering':\r\n-        return _nextOfferingId++;\r\n-      default:\r\n-        throw ArgumentError(\"Unknown type for ID generation: $type\");\r\n-    }\r\n-  }\r\n-\r\n-  T? _findById<T extends dynamic>(List<T> collection, int id) {\r\n-    // Assuming items in collection have an 'id' property\r\n-    try {\r\n-      return collection.firstWhere((item) => item.id == id);\r\n-    } catch (e) {\r\n-      return null; // Not found\r\n-    }\r\n-  }\r\n-\r\n-  void _displayList<T>(List<T> items, String title, String Function(T) formatter) {\r\n-    print(\"\\n--- $title ---\");\r\n-    if (items.isEmpty) {\r\n-      print(\"No ${title.toLowerCase()} available.\");\r\n-    } else {\r\n-      items.asMap().forEach((index, item) {\r\n-        // Using item.id if available, otherwise index\r\n-        String prefix = \"\";\r\n-        try {\r\n-          prefix = \"${(item as dynamic).id}. \";\r\n-        } catch (e) {\r\n-          prefix = \"${index + 1}. \";\r\n-        }\r\n-        print(prefix + formatter(item));\r\n-      });\r\n-    }\r\n-    print(\"-------------------\");\r\n-  }\r\n-\r\n-\r\n-  // --- Add Methods ---\r\n-  void addStudent() {\r\n-    String name = _prompt(\"Enter student name: \");\r\n-    if (name.isEmpty) {\r\n-      print(\"Student name cannot be empty.\");\r\n-      return;\r\n-    }\r\n-    var student = Student(_generateIdFor('student'), name);\r\n-    _students.add(student);\r\n-    print(\"Student '${student.name}' (ID: ${student.id}) added.\");\r\n-  }\r\n-\r\n-  void addInstructor() {\r\n-    String name = _prompt(\"Enter instructor name: \");\r\n-     if (name.isEmpty) {\r\n-      print(\"Instructor name cannot be empty.\");\r\n-      return;\r\n-    }\r\n-    var instructor = Instructor(_generateIdFor('instructor'), name);\r\n-    _instructors.add(instructor);\r\n-    print(\"Instructor '${instructor.name}' (ID: ${instructor.id}) added.\");\r\n-  }\r\n-\r\n-  void addCourse() {\r\n-    String name = _prompt(\"Enter course name (e.g., CS101 - Intro to Programming): \");\r\n-     if (name.isEmpty) {\r\n-      print(\"Course name cannot be empty.\");\r\n-      return;\r\n-    }\r\n-    var course = Course(_generateIdFor('course'), name);\r\n-    _courses.add(course);\r\n-    print(\"Course '${course.name}' (ID: ${course.id}) added.\");\r\n-  }\r\n-\r\n-  void addClassroom() {\r\n-    String name = _prompt(\"Enter classroom name (e.g., Room A101): \");\r\n-    if (name.isEmpty) {\r\n-      print(\"Classroom name cannot be empty.\");\r\n-      return;\r\n-    }\r\n-    String capacityStr = _prompt(\"Enter classroom capacity: \");\r\n-    int? capacity = int.tryParse(capacityStr);\r\n-    if (capacity == null || capacity <= 0) {\r\n-      print(\"Invalid capacity. Please enter a positive number.\");\r\n-      return;\r\n-    }\r\n-    var classroom = Classroom(_generateIdFor('classroom'), name, capacity);\r\n-    _classrooms.add(classroom);\r\n-    print(\"Classroom '${classroom.name}' (Capacity: ${classroom.capacity}, ID: ${classroom.id}) added.\");\r\n-  }\r\n-\r\n-  void addTimeslot() {\r\n-    String timeslotStr = _prompt(\"Enter timeslot (e.g., Mon 09:00-10:00): \");\r\n-    if (timeslotStr.isEmpty) {\r\n-      print(\"Timeslot cannot be empty.\");\r\n-      return;\r\n-    }\r\n-    if (_timeslots.contains(timeslotStr)) {\r\n-      print(\"Timeslot already exists.\");\r\n-    } else {\r\n-      _timeslots.add(timeslotStr);\r\n-      print(\"Timeslot '$timeslotStr' added.\");\r\n-    }\r\n-  }\r\n-\r\n-  void addSubjectOfferingToSchedule() {\r\n-    if (_courses.isEmpty) {\r\n-      print(\"Please add courses first.\");\r\n-      return;\r\n-    }\r\n-    if (_instructors.isEmpty) {\r\n-      print(\"Please add instructors first.\");\r\n-      return;\r\n-    }\r\n-\r\n-    _displayList(_courses, \"Available Courses\", (c) => c.name);\r\n-    String courseIdStr = _prompt(\"Enter Course ID to offer: \");\r\n-    int? courseId = int.tryParse(courseIdStr);\r\n-    Course? course = courseId != null ? _findById(_courses, courseId) : null;\r\n-    if (course == null) {\r\n-      print(\"Invalid Course ID.\");\r\n-      return;\r\n-    }\r\n-\r\n-    _displayList(_instructors, \"Available Instructors\", (i) => i.name);\r\n-    String instructorIdStr = _prompt(\"Enter Instructor ID for this offering: \");\r\n-    int? instructorId = int.tryParse(instructorIdStr);\r\n-    Instructor? instructor = instructorId != null ? _findById(_instructors, instructorId) : null;\r\n-    if (instructor == null) {\r\n-      print(\"Invalid Instructor ID.\");\r\n-      return;\r\n-    }\r\n-\r\n-    List<Student> enrolledStudentsList = [];\r\n-    if (_students.isNotEmpty) {\r\n-      while (true) {\r\n-        _displayList(_students, \"Available Students\", (s) => s.name);\r\n-        _displayList(enrolledStudentsList, \"Currently Enrolled for this Offering\", (s) => s.name);\r\n-        String studentInput = _prompt(\"Enter Student ID to enroll (or type 'done'): \");\r\n-        if (studentInput.toLowerCase() == 'done') break;\r\n-\r\n-        int? studentId = int.tryParse(studentInput);\r\n-        Student? student = studentId != null ? _findById(_students, studentId) : null;\r\n-\r\n-        if (student != null && !enrolledStudentsList.contains(student)) {\r\n-          enrolledStudentsList.add(student);\r\n-          print(\"${student.name} added to this offering.\");\r\n-        } else if (enrolledStudentsList.contains(student)) {\r\n-          print(\"${student?.name} is already added.\");\r\n-        } else {\r\n-          print(\"Invalid Student ID.\");\r\n-        }\r\n-      }\r\n-    } else {\r\n-      print(\"No students available to enroll. Offering will have 0 students for now.\");\r\n-    }\r\n-\r\n-    var offering = SubjectOffering(\r\n-        _generateIdFor('offering'), course, instructor, enrolledStudentsList);\r\n-    _subjectOfferingsToSchedule.add(offering);\r\n-    print(\r\n-        \"Subject Offering '${course.name}' by '${instructor.name}' (ID: ${offering.id}) added to scheduling queue.\");\r\n-  }\r\n-\r\n-  // --- View Methods ---\r\n-  void viewStudents() => _displayList(_students, \"Students\", (s) => s.name);\r\n-  void viewInstructors() => _displayList(_instructors, \"Instructors\", (i) => i.name);\r\n-  void viewCourses() => _displayList(_courses, \"Courses\", (c) => c.name);\r\n-  void viewClassrooms() => _displayList(_classrooms, \"Classrooms\", (c) => \"${c.name} (Capacity: ${c.capacity})\");\r\n-  void viewTimeslots() => _displayList(_timeslots, \"Available Timeslots\", (ts) => ts);\r\n-\r\n-  void viewOfferingsToSchedule() {\r\n-    _displayList(_subjectOfferingsToSchedule, \"Offerings Queued for Scheduling\", (offering) {\r\n-      var studentNames = offering.studentsEnrolled.map((s) => s.name).join(', ');\r\n-      studentNames = studentNames.isEmpty ? \"None\" : studentNames;\r\n-      return \"${offering.course.name} - Instructor: ${offering.instructor.name} - Students: $studentNames\";\r\n-    });\r\n-  }\r\n-\r\n-  void viewFinalSchedule() {\r\n-    print(\"\\n--- FINAL SCHEDULE ---\");\r\n-    if (_finalSchedule.isEmpty) {\r\n-      print(\"No classes have been scheduled yet, or scheduling failed.\");\r\n-    } else {\r\n-      _finalSchedule.forEach(print); // Uses ScheduledClass.toString()\r\n-    }\r\n-    print(\"--------------------\");\r\n-  }\r\n-\r\n-  // --- Scheduling Logic ---\r\n-  String? _checkForConflicts(SubjectOffering offeringToCheck, Classroom classroom, String timeslot) {\r\n-    // 1. Classroom availability\r\n-    if (_finalSchedule.any((sc) => sc.classroomName == classroom.name && sc.timeslot == timeslot)) {\r\n-      return \"Conflict: Classroom ${classroom.name} busy at $timeslot.\";\r\n-    }\r\n-\r\n-    // 2. Instructor availability\r\n-    if (_finalSchedule.any((sc) => sc.instructorName == offeringToCheck.instructor.name && sc.timeslot == timeslot)) {\r\n-      return \"Conflict: Instructor ${offeringToCheck.instructor.name} busy at $timeslot.\";\r\n-    }\r\n-\r\n-    // 3. Student availability\r\n-    for (var student in offeringToCheck.studentsEnrolled) {\r\n-      if (_finalSchedule.any((sc) => sc.studentNames.contains(student.name) && sc.timeslot == timeslot)) {\r\n-        return \"Conflict: Student ${student.name} busy at $timeslot.\";\r\n-      }\r\n-    }\r\n-\r\n-    // 4. Classroom capacity\r\n-    if (offeringToCheck.studentsEnrolled.length > classroom.capacity) {\r\n-      return \"Conflict: Classroom ${classroom.name} capacity (${classroom.capacity}) too small for ${offeringToCheck.studentsEnrolled.length} students.\";\r\n-    }\r\n-    \r\n-    // 5. Offering ID already scheduled (should not happen if logic is correct elsewhere but good check)\r\n-    if (_finalSchedule.any((sc) => sc.offeringId == offeringToCheck.id)) {\r\n-        return \"Error: Offering ID ${offeringToCheck.id} is somehow already in the final schedule.\";\r\n-    }\r\n-\r\n-    return null; // No conflicts\r\n-  }\r\n-\r\n-  void runScheduler() {\r\n-    if (_subjectOfferingsToSchedule.isEmpty) {\r\n-      print(\"No subject offerings in the queue to schedule. Please add some first.\");\r\n-      return;\r\n-    }\r\n-    if (_classrooms.isEmpty) {\r\n-      print(\"No classrooms available. Please add classrooms first.\");\r\n-      return;\r\n-    }\r\n-    if (_timeslots.isEmpty) {\r\n-      print(\"No timeslots available. Please add timeslots first.\");\r\n-      return;\r\n-    }\r\n-\r\n-    print(\"\\n--- Running Scheduler ---\");\r\n-    _finalSchedule.clear(); // Clear previous schedule\r\n-\r\n-    Set<int> processedOfferingIds = {}; // To avoid processing the same offering multiple times\r\n-\r\n-    for (var currentOffering in _subjectOfferingsToSchedule) {\r\n-      if (processedOfferingIds.contains(currentOffering.id)) {\r\n-        print(\"Skipping already processed offering ID: ${currentOffering.id}\");\r\n-        continue;\r\n-      }\r\n-\r\n-      print(\"\\nAttempting to schedule: ${currentOffering.course.name} (Instructor: ${currentOffering.instructor.name}, Offering ID: ${currentOffering.id})\");\r\n-      bool scheduledThisOffering = false;\r\n-\r\n-      for (var classroom in _classrooms) {\r\n-        for (var timeslot in _timeslots) {\r\n-          String? conflictReason = _checkForConflicts(currentOffering, classroom, timeslot);\r\n-\r\n-          if (conflictReason != null) {\r\n-            // print(\"    $conflictReason\"); // Verbose logging for debugging\r\n-            continue;\r\n-          } else {\r\n-            var newScheduledClass = ScheduledClass(\r\n-              currentOffering.id,\r\n-              currentOffering.course.name,\r\n-              currentOffering.instructor.name,\r\n-              currentOffering.studentsEnrolled.map((s) => s.name).toList(),\r\n-              classroom.name,\r\n-              timeslot,\r\n-            );\r\n-            _finalSchedule.add(newScheduledClass);\r\n-            scheduledThisOffering = true;\r\n-            processedOfferingIds.add(currentOffering.id);\r\n-            print(\"  SUCCESS: Scheduled ${currentOffering.course.name} in ${classroom.name} at $timeslot\");\r\n-            break; // Break from TIMESLOTS loop\r\n-          }\r\n-        } // End TIMESLOTS loop\r\n-        if (scheduledThisOffering) break; // Break from CLASSROOMS loop\r\n-      } // End CLASSROOMS loop\r\n-\r\n-      if (!scheduledThisOffering) {\r\n-        print(\"  FAILURE: Could not find a suitable slot for ${currentOffering.course.name} (ID: ${currentOffering.id}).\");\r\n-      }\r\n-    }\r\n-    print(\"--- Scheduler Finished ---\");\r\n-    viewFinalSchedule();\r\n-  }\r\n-\r\n-  // --- Main Menu ---\r\n-  void mainMenu() {\r\n-    while (true) {\r\n-      print(\"\\n===== Timetable Scheduler Menu (Dart) =====\");\r\n-      print(\"1. Add Student\");\r\n-      print(\"2. Add Instructor\");\r\n-      print(\"3. Add Course (e.g., Math 101)\");\r\n-      print(\"4. Add Classroom\");\r\n-      print(\"5. Add Timeslot\");\r\n-      print(\"6. Create Subject Offering (to be scheduled)\");\r\n-      print(\"------------------------------------\");\r\n-      print(\"7. View Students\");\r\n-      print(\"8. View Instructors\");\r\n-      print(\"9. View Courses\");\r\n-      print(\"10. View Classrooms\");\r\n-      print(\"11. View Timeslots\");\r\n-      print(\"12. View Offerings Queued for Scheduling\");\r\n-      print(\"------------------------------------\");\r\n-      print(\"13. RUN SCHEDULER\");\r\n-      print(\"14. View Final Schedule\");\r\n-      print(\"------------------------------------\");\r\n-      print(\"0. Exit\");\r\n-      String choice = _prompt(\"Enter your choice: \");\r\n-\r\n-      switch (choice) {\r\n-        case '1': addStudent(); break;\r\n-        case '2': addInstructor(); break;\r\n-        case '3': addCourse(); break;\r\n-        case '4': addClassroom(); break;\r\n-        case '5': addTimeslot(); break;\r\n-        case '6': addSubjectOfferingToSchedule(); break;\r\n-        case '7': viewStudents(); break;\r\n-        case '8': viewInstructors(); break;\r\n-        case '9': viewCourses(); break;\r\n-        case '10': viewClassrooms(); break;\r\n-        case '11': viewTimeslots(); break;\r\n-        case '12': viewOfferingsToSchedule(); break;\r\n-        case '13': runScheduler(); break;\r\n-        case '14': viewFinalSchedule(); break;\r\n-        case '0':\r\n-          print(\"Exiting. Goodbye!\");\r\n-          return; // Exit the loop and method\r\n-        default:\r\n-          print(\"Invalid choice. Please try again.\");\r\n-      }\r\n-    }\r\n-  }\r\n-}\r\n-\r\n-void main() {\r\n-  var schedulerApp = TimetableScheduler();\r\n-  schedulerApp.mainMenu();\r\n-}\n-import 'dart:io';\r\n-\r\n-// --- DATA STRUCTURES ---\r\n-\r\n-class Student {\r\n-  int id;\r\n-  String name;\r\n-\r\n-  Student(this.id, this.name);\r\n-\r\n-  @override\r\n-  String toString() => \"ID: $id, Name: $name\";\r\n-}\r\n-\r\n-class Instructor {\r\n-  int id;\r\n-  String name;\r\n-\r\n-  Instructor(this.id, this.name);\r\n-\r\n-  @override\r\n-  String toString() => \"ID: $id, Name: $name\";\r\n-}\r\n-\r\n-// Represents the general course, e.g., \"CS101\"\r\n-class Course {\r\n-  int id;\r\n-  String name;\r\n-\r\n-  Course(this.id, this.name);\r\n-\r\n-  @override\r\n-  String toString() => \"ID: $id, Name: $name\";\r\n-}\r\n-\r\n-class Classroom {\r\n-  int id;\r\n-  String name;\r\n-  int capacity;\r\n-\r\n-  Classroom(this.id, this.name, this.capacity);\r\n-\r\n-  @override\r\n-  String toString() => \"ID: $id, Name: $name, Capacity: $capacity\";\r\n-}\r\n-\r\n-// This is what we actually try to schedule\r\n-class SubjectOffering {\r\n-  int id;\r\n-  Course course;\r\n-  Instructor instructor;\r\n-  List<Student> studentsEnrolled;\r\n-\r\n-  SubjectOffering(this.id, this.course, this.instructor, this.studentsEnrolled);\r\n-\r\n-  @override\r\n-  String toString() {\r\n-    var studentNames = studentsEnrolled.map((s) => s.name).join(', ');\r\n-    if (studentNames.isEmpty) studentNames = \"None\";\r\n-    return \"Offering ID: $id, Course: ${course.name}, Instructor: ${instructor.name}, Students: $studentNames\";\r\n-  }\r\n-}\r\n-\r\n-class ScheduledClass {\r\n-  int offeringId;\r\n-  String courseName;\r\n-  String instructorName;\r\n-  List<String> studentNames;\r\n-  String classroomName;\r\n-  String timeslot;\r\n-\r\n-  ScheduledClass(this.offeringId, this.courseName, this.instructorName,\r\n-      this.studentNames, this.classroomName, this.timeslot);\r\n-\r\n-  @override\r\n-  String toString() {\r\n-    return \"\"\"\r\n-  Offering ID: $offeringId\r\n-    Course:     $courseName\r\n-    Instructor: $instructorName\r\n-    Classroom:  $classroomName\r\n-    Timeslot:   $timeslot\r\n-    Students:   ${studentNames.join(', ')}\r\n-    --------------------\"\"\";\r\n-  }\r\n-}\r\n-\r\n-class TimetableScheduler {\r\n-  final List<Student> _students = [];\r\n-  final List<Instructor> _instructors = [];\r\n-  final List<Course> _courses = [];\r\n-  final List<Classroom> _classrooms = [];\r\n-  final List<String> _timeslots = [];\r\n-\r\n-  final List<SubjectOffering> _subjectOfferingsToSchedule = [];\r\n-  List<ScheduledClass> _finalSchedule = []; // Modifiable\r\n-\r\n-  int _nextStudentId = 1;\r\n-  int _nextInstructorId = 1;\r\n-  int _nextCourseId = 1;\r\n-  int _nextClassroomId = 1;\r\n-  int _nextOfferingId = 1;\r\n-\r\n-  // --- Helper Methods ---\r\n-  String _prompt(String message) {\r\n-    stdout.write(message);\r\n-    return stdin.readLineSync() ?? \"\";\r\n-  }\r\n-\r\n-  int _generateIdFor(String type) {\r\n-    switch (type) {\r\n-      case 'student':\r\n-        return _nextStudentId++;\r\n-      case 'instructor':\r\n-        return _nextInstructorId++;\r\n-      case 'course':\r\n-        return _nextCourseId++;\r\n-      case 'classroom':\r\n-        return _nextClassroomId++;\r\n-      case 'offering':\r\n-        return _nextOfferingId++;\r\n-      default:\r\n-        throw ArgumentError(\"Unknown type for ID generation: $type\");\r\n-    }\r\n-  }\r\n-\r\n-  T? _findById<T extends dynamic>(List<T> collection, int id) {\r\n-    // Assuming items in collection have an 'id' property\r\n-    try {\r\n-      return collection.firstWhere((item) => item.id == id);\r\n-    } catch (e) {\r\n-      return null; // Not found\r\n-    }\r\n-  }\r\n-\r\n-  void _displayList<T>(List<T> items, String title, String Function(T) formatter) {\r\n-    print(\"\\n--- $title ---\");\r\n-    if (items.isEmpty) {\r\n-      print(\"No ${title.toLowerCase()} available.\");\r\n-    } else {\r\n-      items.asMap().forEach((index, item) {\r\n-        // Using item.id if available, otherwise index\r\n-        String prefix = \"\";\r\n-        try {\r\n-          prefix = \"${(item as dynamic).id}. \";\r\n-        } catch (e) {\r\n-          prefix = \"${index + 1}. \";\r\n-        }\r\n-        print(prefix + formatter(item));\r\n-      });\r\n-    }\r\n-    print(\"-------------------\");\r\n-  }\r\n-\r\n-\r\n-  // --- Add Methods ---\r\n-  void addStudent() {\r\n-    String name = _prompt(\"Enter student name: \");\r\n-    if (name.isEmpty) {\r\n-      print(\"Student name cannot be empty.\");\r\n-      return;\r\n-    }\r\n-    var student = Student(_generateIdFor('student'), name);\r\n-    _students.add(student);\r\n-    print(\"Student '${student.name}' (ID: ${student.id}) added.\");\r\n-  }\r\n-\r\n-  void addInstructor() {\r\n-    String name = _prompt(\"Enter instructor name: \");\r\n-     if (name.isEmpty) {\r\n-      print(\"Instructor name cannot be empty.\");\r\n-      return;\r\n-    }\r\n-    var instructor = Instructor(_generateIdFor('instructor'), name);\r\n-    _instructors.add(instructor);\r\n-    print(\"Instructor '${instructor.name}' (ID: ${instructor.id}) added.\");\r\n-  }\r\n-\r\n-  void addCourse() {\r\n-    String name = _prompt(\"Enter course name (e.g., CS101 - Intro to Programming): \");\r\n-     if (name.isEmpty) {\r\n-      print(\"Course name cannot be empty.\");\r\n-      return;\r\n-    }\r\n-    var course = Course(_generateIdFor('course'), name);\r\n-    _courses.add(course);\r\n-    print(\"Course '${course.name}' (ID: ${course.id}) added.\");\r\n-  }\r\n-\r\n-  void addClassroom() {\r\n-    String name = _prompt(\"Enter classroom name (e.g., Room A101): \");\r\n-    if (name.isEmpty) {\r\n-      print(\"Classroom name cannot be empty.\");\r\n-      return;\r\n-    }\r\n-    String capacityStr = _prompt(\"Enter classroom capacity: \");\r\n-    int? capacity = int.tryParse(capacityStr);\r\n-    if (capacity == null || capacity <= 0) {\r\n-      print(\"Invalid capacity. Please enter a positive number.\");\r\n-      return;\r\n-    }\r\n-    var classroom = Classroom(_generateIdFor('classroom'), name, capacity);\r\n-    _classrooms.add(classroom);\r\n-    print(\"Classroom '${classroom.name}' (Capacity: ${classroom.capacity}, ID: ${classroom.id}) added.\");\r\n-  }\r\n-\r\n-  void addTimeslot() {\r\n-    String timeslotStr = _prompt(\"Enter timeslot (e.g., Mon 09:00-10:00): \");\r\n-    if (timeslotStr.isEmpty) {\r\n-      print(\"Timeslot cannot be empty.\");\r\n-      return;\r\n-    }\r\n-    if (_timeslots.contains(timeslotStr)) {\r\n-      print(\"Timeslot already exists.\");\r\n-    } else {\r\n-      _timeslots.add(timeslotStr);\r\n-      print(\"Timeslot '$timeslotStr' added.\");\r\n-    }\r\n-  }\r\n-\r\n-  void addSubjectOfferingToSchedule() {\r\n-    if (_courses.isEmpty) {\r\n-      print(\"Please add courses first.\");\r\n-      return;\r\n-    }\r\n-    if (_instructors.isEmpty) {\r\n-      print(\"Please add instructors first.\");\r\n-      return;\r\n-    }\r\n-\r\n-    _displayList(_courses, \"Available Courses\", (c) => c.name);\r\n-    String courseIdStr = _prompt(\"Enter Course ID to offer: \");\r\n-    int? courseId = int.tryParse(courseIdStr);\r\n-    Course? course = courseId != null ? _findById(_courses, courseId) : null;\r\n-    if (course == null) {\r\n-      print(\"Invalid Course ID.\");\r\n-      return;\r\n-    }\r\n-\r\n-    _displayList(_instructors, \"Available Instructors\", (i) => i.name);\r\n-    String instructorIdStr = _prompt(\"Enter Instructor ID for this offering: \");\r\n-    int? instructorId = int.tryParse(instructorIdStr);\r\n-    Instructor? instructor = instructorId != null ? _findById(_instructors, instructorId) : null;\r\n-    if (instructor == null) {\r\n-      print(\"Invalid Instructor ID.\");\r\n-      return;\r\n-    }\r\n-\r\n-    List<Student> enrolledStudentsList = [];\r\n-    if (_students.isNotEmpty) {\r\n-      while (true) {\r\n-        _displayList(_students, \"Available Students\", (s) => s.name);\r\n-        _displayList(enrolledStudentsList, \"Currently Enrolled for this Offering\", (s) => s.name);\r\n-        String studentInput = _prompt(\"Enter Student ID to enroll (or type 'done'): \");\r\n-        if (studentInput.toLowerCase() == 'done') break;\r\n-\r\n-        int? studentId = int.tryParse(studentInput);\r\n-        Student? student = studentId != null ? _findById(_students, studentId) : null;\r\n-\r\n-        if (student != null && !enrolledStudentsList.contains(student)) {\r\n-          enrolledStudentsList.add(student);\r\n-          print(\"${student.name} added to this offering.\");\r\n-        } else if (enrolledStudentsList.contains(student)) {\r\n-          print(\"${student?.name} is already added.\");\r\n-        } else {\r\n-          print(\"Invalid Student ID.\");\r\n-        }\r\n-      }\r\n-    } else {\r\n-      print(\"No students available to enroll. Offering will have 0 students for now.\");\r\n-    }\r\n-\r\n-    var offering = SubjectOffering(\r\n-        _generateIdFor('offering'), course, instructor, enrolledStudentsList);\r\n-    _subjectOfferingsToSchedule.add(offering);\r\n-    print(\r\n-        \"Subject Offering '${course.name}' by '${instructor.name}' (ID: ${offering.id}) added to scheduling queue.\");\r\n-  }\r\n-\r\n-  // --- View Methods ---\r\n-  void viewStudents() => _displayList(_students, \"Students\", (s) => s.name);\r\n-  void viewInstructors() => _displayList(_instructors, \"Instructors\", (i) => i.name);\r\n-  void viewCourses() => _displayList(_courses, \"Courses\", (c) => c.name);\r\n-  void viewClassrooms() => _displayList(_classrooms, \"Classrooms\", (c) => \"${c.name} (Capacity: ${c.capacity})\");\r\n-  void viewTimeslots() => _displayList(_timeslots, \"Available Timeslots\", (ts) => ts);\r\n-\r\n-  void viewOfferingsToSchedule() {\r\n-    _displayList(_subjectOfferingsToSchedule, \"Offerings Queued for Scheduling\", (offering) {\r\n-      var studentNames = offering.studentsEnrolled.map((s) => s.name).join(', ');\r\n-      studentNames = studentNames.isEmpty ? \"None\" : studentNames;\r\n-      return \"${offering.course.name} - Instructor: ${offering.instructor.name} - Students: $studentNames\";\r\n-    });\r\n-  }\r\n-\r\n-  void viewFinalSchedule() {\r\n-    print(\"\\n--- FINAL SCHEDULE ---\");\r\n-    if (_finalSchedule.isEmpty) {\r\n-      print(\"No classes have been scheduled yet, or scheduling failed.\");\r\n-    } else {\r\n-      _finalSchedule.forEach(print); // Uses ScheduledClass.toString()\r\n-    }\r\n-    print(\"--------------------\");\r\n-  }\r\n-\r\n-  // --- Scheduling Logic ---\r\n-  String? _checkForConflicts(SubjectOffering offeringToCheck, Classroom classroom, String timeslot) {\r\n-    // 1. Classroom availability\r\n-    if (_finalSchedule.any((sc) => sc.classroomName == classroom.name && sc.timeslot == timeslot)) {\r\n-      return \"Conflict: Classroom ${classroom.name} busy at $timeslot.\";\r\n-    }\r\n-\r\n-    // 2. Instructor availability\r\n-    if (_finalSchedule.any((sc) => sc.instructorName == offeringToCheck.instructor.name && sc.timeslot == timeslot)) {\r\n-      return \"Conflict: Instructor ${offeringToCheck.instructor.name} busy at $timeslot.\";\r\n-    }\r\n-\r\n-    // 3. Student availability\r\n-    for (var student in offeringToCheck.studentsEnrolled) {\r\n-      if (_finalSchedule.any((sc) => sc.studentNames.contains(student.name) && sc.timeslot == timeslot)) {\r\n-        return \"Conflict: Student ${student.name} busy at $timeslot.\";\r\n-      }\r\n-    }\r\n-\r\n-    // 4. Classroom capacity\r\n-    if (offeringToCheck.studentsEnrolled.length > classroom.capacity) {\r\n-      return \"Conflict: Classroom ${classroom.name} capacity (${classroom.capacity}) too small for ${offeringToCheck.studentsEnrolled.length} students.\";\r\n-    }\r\n-    \r\n-    // 5. Offering ID already scheduled (should not happen if logic is correct elsewhere but good check)\r\n-    if (_finalSchedule.any((sc) => sc.offeringId == offeringToCheck.id)) {\r\n-        return \"Error: Offering ID ${offeringToCheck.id} is somehow already in the final schedule.\";\r\n-    }\r\n-\r\n-    return null; // No conflicts\r\n-  }\r\n-\r\n-  void runScheduler() {\r\n-    if (_subjectOfferingsToSchedule.isEmpty) {\r\n-      print(\"No subject offerings in the queue to schedule. Please add some first.\");\r\n-      return;\r\n-    }\r\n-    if (_classrooms.isEmpty) {\r\n-      print(\"No classrooms available. Please add classrooms first.\");\r\n-      return;\r\n-    }\r\n-    if (_timeslots.isEmpty) {\r\n-      print(\"No timeslots available. Please add timeslots first.\");\r\n-      return;\r\n-    }\r\n-\r\n-    print(\"\\n--- Running Scheduler ---\");\r\n-    _finalSchedule.clear(); // Clear previous schedule\r\n-\r\n-    Set<int> processedOfferingIds = {}; // To avoid processing the same offering multiple times\r\n-\r\n-    for (var currentOffering in _subjectOfferingsToSchedule) {\r\n-      if (processedOfferingIds.contains(currentOffering.id)) {\r\n-        print(\"Skipping already processed offering ID: ${currentOffering.id}\");\r\n-        continue;\r\n-      }\r\n-\r\n-      print(\"\\nAttempting to schedule: ${currentOffering.course.name} (Instructor: ${currentOffering.instructor.name}, Offering ID: ${currentOffering.id})\");\r\n-      bool scheduledThisOffering = false;\r\n-\r\n-      for (var classroom in _classrooms) {\r\n-        for (var timeslot in _timeslots) {\r\n-          String? conflictReason = _checkForConflicts(currentOffering, classroom, timeslot);\r\n-\r\n-          if (conflictReason != null) {\r\n-            // print(\"    $conflictReason\"); // Verbose logging for debugging\r\n-            continue;\r\n-          } else {\r\n-            var newScheduledClass = ScheduledClass(\r\n-              currentOffering.id,\r\n-              currentOffering.course.name,\r\n-              currentOffering.instructor.name,\r\n-              currentOffering.studentsEnrolled.map((s) => s.name).toList(),\r\n-              classroom.name,\r\n-              timeslot,\r\n-            );\r\n-            _finalSchedule.add(newScheduledClass);\r\n-            scheduledThisOffering = true;\r\n-            processedOfferingIds.add(currentOffering.id);\r\n-            print(\"  SUCCESS: Scheduled ${currentOffering.course.name} in ${classroom.name} at $timeslot\");\r\n-            break; // Break from TIMESLOTS loop\r\n-          }\r\n-        } // End TIMESLOTS loop\r\n-        if (scheduledThisOffering) break; // Break from CLASSROOMS loop\r\n-      } // End CLASSROOMS loop\r\n-\r\n-      if (!scheduledThisOffering) {\r\n-        print(\"  FAILURE: Could not find a suitable slot for ${currentOffering.course.name} (ID: ${currentOffering.id}).\");\r\n-      }\r\n-    }\r\n-    print(\"--- Scheduler Finished ---\");\r\n-    viewFinalSchedule();\r\n-  }\r\n-\r\n-  // --- Main Menu ---\r\n-  void mainMenu() {\r\n-    while (true) {\r\n-      print(\"\\n===== Timetable Scheduler Menu (Dart) =====\");\r\n-      print(\"1. Add Student\");\r\n-      print(\"2. Add Instructor\");\r\n-      print(\"3. Add Course (e.g., Math 101)\");\r\n-      print(\"4. Add Classroom\");\r\n-      print(\"5. Add Timeslot\");\r\n-      print(\"6. Create Subject Offering (to be scheduled)\");\r\n-      print(\"------------------------------------\");\r\n-      print(\"7. View Students\");\r\n-      print(\"8. View Instructors\");\r\n-      print(\"9. View Courses\");\r\n-      print(\"10. View Classrooms\");\r\n-      print(\"11. View Timeslots\");\r\n-      print(\"12. View Offerings Queued for Scheduling\");\r\n-      print(\"------------------------------------\");\r\n-      print(\"13. RUN SCHEDULER\");\r\n-      print(\"14. View Final Schedule\");\r\n-      print(\"------------------------------------\");\r\n-      print(\"0. Exit\");\r\n-      String choice = _prompt(\"Enter your choice: \");\r\n-\r\n-      switch (choice) {\r\n-        case '1': addStudent(); break;\r\n-        case '2': addInstructor(); break;\r\n-        case '3': addCourse(); break;\r\n-        case '4': addClassroom(); break;\r\n-        case '5': addTimeslot(); break;\r\n-        case '6': addSubjectOfferingToSchedule(); break;\r\n-        case '7': viewStudents(); break;\r\n-        case '8': viewInstructors(); break;\r\n-        case '9': viewCourses(); break;\r\n-        case '10': viewClassrooms(); break;\r\n-        case '11': viewTimeslots(); break;\r\n-        case '12': viewOfferingsToSchedule(); break;\r\n-        case '13': runScheduler(); break;\r\n-        case '14': viewFinalSchedule(); break;\r\n-        case '0':\r\n-          print(\"Exiting. Goodbye!\");\r\n-          return; // Exit the loop and method\r\n-        default:\r\n-          print(\"Invalid choice. Please try again.\");\r\n-      }\r\n-    }\r\n-  }\r\n-}\r\n-\r\n-void main() {\r\n-  var schedulerApp = TimetableScheduler();\r\n-  schedulerApp.mainMenu();\r\n }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1747022779220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,10 +68,16 @@\n   List<String> studentNames;\r\n   String classroomName;\r\n   String timeslot;\r\n \r\n-  ScheduledClass(this.offeringId, this.courseName, this.instructorName,\r\n-      this.studentNames, this.classroomName, this.timeslot);\r\n+  ScheduledClass(\r\n+    this.offeringId,\r\n+    this.courseName,\r\n+    this.instructorName,\r\n+    this.studentNames,\r\n+    this.classroomName,\r\n+    this.timeslot,\r\n+  );\r\n \r\n   @override\r\n   String toString() {\r\n     return \"\"\"\r\n@@ -132,9 +138,13 @@\n       return null; // Not found\r\n     }\r\n   }\r\n \r\n-  void _displayList<T>(List<T> items, String title, String Function(T) formatter) {\r\n+  void _displayList<T>(\r\n+    List<T> items,\r\n+    String title,\r\n+    String Function(T) formatter,\r\n+  ) {\r\n     print(\"\\n--- $title ---\");\r\n     if (items.isEmpty) {\r\n       print(\"No ${title.toLowerCase()} available.\");\r\n     } else {\r\n@@ -151,9 +161,8 @@\n     }\r\n     print(\"-------------------\");\r\n   }\r\n \r\n-\r\n   // --- Add Methods ---\r\n   void addStudent() {\r\n     String name = _prompt(\"Enter student name: \");\r\n     if (name.isEmpty) {\r\n@@ -166,9 +175,9 @@\n   }\r\n \r\n   void addInstructor() {\r\n     String name = _prompt(\"Enter instructor name: \");\r\n-     if (name.isEmpty) {\r\n+    if (name.isEmpty) {\r\n       print(\"Instructor name cannot be empty.\");\r\n       return;\r\n     }\r\n     var instructor = Instructor(_generateIdFor('instructor'), name);\r\n@@ -176,10 +185,12 @@\n     print(\"Instructor '${instructor.name}' (ID: ${instructor.id}) added.\");\r\n   }\r\n \r\n   void addCourse() {\r\n-    String name = _prompt(\"Enter course name (e.g., CS101 - Intro to Programming): \");\r\n-     if (name.isEmpty) {\r\n+    String name = _prompt(\r\n+      \"Enter course name (e.g., CS101 - Intro to Programming): \",\r\n+    );\r\n+    if (name.isEmpty) {\r\n       print(\"Course name cannot be empty.\");\r\n       return;\r\n     }\r\n     var course = Course(_generateIdFor('course'), name);\r\n@@ -200,9 +211,11 @@\n       return;\r\n     }\r\n     var classroom = Classroom(_generateIdFor('classroom'), name, capacity);\r\n     _classrooms.add(classroom);\r\n-    print(\"Classroom '${classroom.name}' (Capacity: ${classroom.capacity}, ID: ${classroom.id}) added.\");\r\n+    print(\r\n+      \"Classroom '${classroom.name}' (Capacity: ${classroom.capacity}, ID: ${classroom.id}) added.\",\r\n+    );\r\n   }\r\n \r\n   void addTimeslot() {\r\n     String timeslotStr = _prompt(\"Enter timeslot (e.g., Mon 09:00-10:00): \");\r\n@@ -239,9 +252,10 @@\n \r\n     _displayList(_instructors, \"Available Instructors\", (i) => i.name);\r\n     String instructorIdStr = _prompt(\"Enter Instructor ID for this offering: \");\r\n     int? instructorId = int.tryParse(instructorIdStr);\r\n-    Instructor? instructor = instructorId != null ? _findById(_instructors, instructorId) : null;\r\n+    Instructor? instructor =\r\n+        instructorId != null ? _findById(_instructors, instructorId) : null;\r\n     if (instructor == null) {\r\n       print(\"Invalid Instructor ID.\");\r\n       return;\r\n     }\r\n@@ -249,14 +263,21 @@\n     List<Student> enrolledStudentsList = [];\r\n     if (_students.isNotEmpty) {\r\n       while (true) {\r\n         _displayList(_students, \"Available Students\", (s) => s.name);\r\n-        _displayList(enrolledStudentsList, \"Currently Enrolled for this Offering\", (s) => s.name);\r\n-        String studentInput = _prompt(\"Enter Student ID to enroll (or type 'done'): \");\r\n+        _displayList(\r\n+          enrolledStudentsList,\r\n+          \"Currently Enrolled for this Offering\",\r\n+          (s) => s.name,\r\n+        );\r\n+        String studentInput = _prompt(\r\n+          \"Enter Student ID to enroll (or type 'done'): \",\r\n+        );\r\n         if (studentInput.toLowerCase() == 'done') break;\r\n \r\n         int? studentId = int.tryParse(studentInput);\r\n-        Student? student = studentId != null ? _findById(_students, studentId) : null;\r\n+        Student? student =\r\n+            studentId != null ? _findById(_students, studentId) : null;\r\n \r\n         if (student != null && !enrolledStudentsList.contains(student)) {\r\n           enrolledStudentsList.add(student);\r\n           print(\"${student.name} added to this offering.\");\r\n@@ -266,28 +287,45 @@\n           print(\"Invalid Student ID.\");\r\n         }\r\n       }\r\n     } else {\r\n-      print(\"No students available to enroll. Offering will have 0 students for now.\");\r\n+      print(\r\n+        \"No students available to enroll. Offering will have 0 students for now.\",\r\n+      );\r\n     }\r\n \r\n     var offering = SubjectOffering(\r\n-        _generateIdFor('offering'), course, instructor, enrolledStudentsList);\r\n+      _generateIdFor('offering'),\r\n+      course,\r\n+      instructor,\r\n+      enrolledStudentsList,\r\n+    );\r\n     _subjectOfferingsToSchedule.add(offering);\r\n     print(\r\n-        \"Subject Offering '${course.name}' by '${instructor.name}' (ID: ${offering.id}) added to scheduling queue.\");\r\n+      \"Subject Offering '${course.name}' by '${instructor.name}' (ID: ${offering.id}) added to scheduling queue.\",\r\n+    );\r\n   }\r\n \r\n   // --- View Methods ---\r\n   void viewStudents() => _displayList(_students, \"Students\", (s) => s.name);\r\n-  void viewInstructors() => _displayList(_instructors, \"Instructors\", (i) => i.name);\r\n+  void viewInstructors() =>\r\n+      _displayList(_instructors, \"Instructors\", (i) => i.name);\r\n   void viewCourses() => _displayList(_courses, \"Courses\", (c) => c.name);\r\n-  void viewClassrooms() => _displayList(_classrooms, \"Classrooms\", (c) => \"${c.name} (Capacity: ${c.capacity})\");\r\n-  void viewTimeslots() => _displayList(_timeslots, \"Available Timeslots\", (ts) => ts);\r\n+  void viewClassrooms() => _displayList(\r\n+    _classrooms,\r\n+    \"Classrooms\",\r\n+    (c) => \"${c.name} (Capacity: ${c.capacity})\",\r\n+  );\r\n+  void viewTimeslots() =>\r\n+      _displayList(_timeslots, \"Available Timeslots\", (ts) => ts);\r\n \r\n   void viewOfferingsToSchedule() {\r\n-    _displayList(_subjectOfferingsToSchedule, \"Offerings Queued for Scheduling\", (offering) {\r\n-      var studentNames = offering.studentsEnrolled.map((s) => s.name).join(', ');\r\n+    _displayList(_subjectOfferingsToSchedule, \"Offerings Queued for Scheduling\", (\r\n+      offering,\r\n+    ) {\r\n+      var studentNames = offering.studentsEnrolled\r\n+          .map((s) => s.name)\r\n+          .join(', ');\r\n       studentNames = studentNames.isEmpty ? \"None\" : studentNames;\r\n       return \"${offering.course.name} - Instructor: ${offering.instructor.name} - Students: $studentNames\";\r\n     });\r\n   }\r\n@@ -302,42 +340,57 @@\n     print(\"--------------------\");\r\n   }\r\n \r\n   // --- Scheduling Logic ---\r\n-  String? _checkForConflicts(SubjectOffering offeringToCheck, Classroom classroom, String timeslot) {\r\n+  String? _checkForConflicts(\r\n+    SubjectOffering offeringToCheck,\r\n+    Classroom classroom,\r\n+    String timeslot,\r\n+  ) {\r\n     // 1. Classroom availability\r\n-    if (_finalSchedule.any((sc) => sc.classroomName == classroom.name && sc.timeslot == timeslot)) {\r\n+    if (_finalSchedule.any(\r\n+      (sc) => sc.classroomName == classroom.name && sc.timeslot == timeslot,\r\n+    )) {\r\n       return \"Conflict: Classroom ${classroom.name} busy at $timeslot.\";\r\n     }\r\n \r\n     // 2. Instructor availability\r\n-    if (_finalSchedule.any((sc) => sc.instructorName == offeringToCheck.instructor.name && sc.timeslot == timeslot)) {\r\n+    if (_finalSchedule.any(\r\n+      (sc) =>\r\n+          sc.instructorName == offeringToCheck.instructor.name &&\r\n+          sc.timeslot == timeslot,\r\n+    )) {\r\n       return \"Conflict: Instructor ${offeringToCheck.instructor.name} busy at $timeslot.\";\r\n     }\r\n \r\n     // 3. Student availability\r\n     for (var student in offeringToCheck.studentsEnrolled) {\r\n-      if (_finalSchedule.any((sc) => sc.studentNames.contains(student.name) && sc.timeslot == timeslot)) {\r\n+      if (_finalSchedule.any(\r\n+        (sc) =>\r\n+            sc.studentNames.contains(student.name) && sc.timeslot == timeslot,\r\n+      )) {\r\n         return \"Conflict: Student ${student.name} busy at $timeslot.\";\r\n       }\r\n     }\r\n \r\n     // 4. Classroom capacity\r\n     if (offeringToCheck.studentsEnrolled.length > classroom.capacity) {\r\n       return \"Conflict: Classroom ${classroom.name} capacity (${classroom.capacity}) too small for ${offeringToCheck.studentsEnrolled.length} students.\";\r\n     }\r\n-    \r\n+\r\n     // 5. Offering ID already scheduled (should not happen if logic is correct elsewhere but good check)\r\n     if (_finalSchedule.any((sc) => sc.offeringId == offeringToCheck.id)) {\r\n-        return \"Error: Offering ID ${offeringToCheck.id} is somehow already in the final schedule.\";\r\n+      return \"Error: Offering ID ${offeringToCheck.id} is somehow already in the final schedule.\";\r\n     }\r\n \r\n     return null; // No conflicts\r\n   }\r\n \r\n   void runScheduler() {\r\n     if (_subjectOfferingsToSchedule.isEmpty) {\r\n-      print(\"No subject offerings in the queue to schedule. Please add some first.\");\r\n+      print(\r\n+        \"No subject offerings in the queue to schedule. Please add some first.\",\r\n+      );\r\n       return;\r\n     }\r\n     if (_classrooms.isEmpty) {\r\n       print(\"No classrooms available. Please add classrooms first.\");\r\n@@ -350,22 +403,29 @@\n \r\n     print(\"\\n--- Running Scheduler ---\");\r\n     _finalSchedule.clear(); // Clear previous schedule\r\n \r\n-    Set<int> processedOfferingIds = {}; // To avoid processing the same offering multiple times\r\n+    Set<int> processedOfferingIds =\r\n+        {}; // To avoid processing the same offering multiple times\r\n \r\n     for (var currentOffering in _subjectOfferingsToSchedule) {\r\n       if (processedOfferingIds.contains(currentOffering.id)) {\r\n         print(\"Skipping already processed offering ID: ${currentOffering.id}\");\r\n         continue;\r\n       }\r\n \r\n-      print(\"\\nAttempting to schedule: ${currentOffering.course.name} (Instructor: ${currentOffering.instructor.name}, Offering ID: ${currentOffering.id})\");\r\n+      print(\r\n+        \"\\nAttempting to schedule: ${currentOffering.course.name} (Instructor: ${currentOffering.instructor.name}, Offering ID: ${currentOffering.id})\",\r\n+      );\r\n       bool scheduledThisOffering = false;\r\n \r\n       for (var classroom in _classrooms) {\r\n         for (var timeslot in _timeslots) {\r\n-          String? conflictReason = _checkForConflicts(currentOffering, classroom, timeslot);\r\n+          String? conflictReason = _checkForConflicts(\r\n+            currentOffering,\r\n+            classroom,\r\n+            timeslot,\r\n+          );\r\n \r\n           if (conflictReason != null) {\r\n             // print(\"    $conflictReason\"); // Verbose logging for debugging\r\n             continue;\r\n@@ -380,17 +440,21 @@\n             );\r\n             _finalSchedule.add(newScheduledClass);\r\n             scheduledThisOffering = true;\r\n             processedOfferingIds.add(currentOffering.id);\r\n-            print(\"  SUCCESS: Scheduled ${currentOffering.course.name} in ${classroom.name} at $timeslot\");\r\n+            print(\r\n+              \"  SUCCESS: Scheduled ${currentOffering.course.name} in ${classroom.name} at $timeslot\",\r\n+            );\r\n             break; // Break from TIMESLOTS loop\r\n           }\r\n         } // End TIMESLOTS loop\r\n         if (scheduledThisOffering) break; // Break from CLASSROOMS loop\r\n       } // End CLASSROOMS loop\r\n \r\n       if (!scheduledThisOffering) {\r\n-        print(\"  FAILURE: Could not find a suitable slot for ${currentOffering.course.name} (ID: ${currentOffering.id}).\");\r\n+        print(\r\n+          \"  FAILURE: Could not find a suitable slot for ${currentOffering.course.name} (ID: ${currentOffering.id}).\",\r\n+        );\r\n       }\r\n     }\r\n     print(\"--- Scheduler Finished ---\");\r\n     viewFinalSchedule();\r\n@@ -420,22 +484,50 @@\n       print(\"0. Exit\");\r\n       String choice = _prompt(\"Enter your choice: \");\r\n \r\n       switch (choice) {\r\n-        case '1': addStudent(); break;\r\n-        case '2': addInstructor(); break;\r\n-        case '3': addCourse(); break;\r\n-        case '4': addClassroom(); break;\r\n-        case '5': addTimeslot(); break;\r\n-        case '6': addSubjectOfferingToSchedule(); break;\r\n-        case '7': viewStudents(); break;\r\n-        case '8': viewInstructors(); break;\r\n-        case '9': viewCourses(); break;\r\n-        case '10': viewClassrooms(); break;\r\n-        case '11': viewTimeslots(); break;\r\n-        case '12': viewOfferingsToSchedule(); break;\r\n-        case '13': runScheduler(); break;\r\n-        case '14': viewFinalSchedule(); break;\r\n+        case '1':\r\n+          addStudent();\r\n+          break;\r\n+        case '2':\r\n+          addInstructor();\r\n+          break;\r\n+        case '3':\r\n+          addCourse();\r\n+          break;\r\n+        case '4':\r\n+          addClassroom();\r\n+          break;\r\n+        case '5':\r\n+          addTimeslot();\r\n+          break;\r\n+        case '6':\r\n+          addSubjectOfferingToSchedule();\r\n+          break;\r\n+        case '7':\r\n+          viewStudents();\r\n+          break;\r\n+        case '8':\r\n+          viewInstructors();\r\n+          break;\r\n+        case '9':\r\n+          viewCourses();\r\n+          break;\r\n+        case '10':\r\n+          viewClassrooms();\r\n+          break;\r\n+        case '11':\r\n+          viewTimeslots();\r\n+          break;\r\n+        case '12':\r\n+          viewOfferingsToSchedule();\r\n+          break;\r\n+        case '13':\r\n+          runScheduler();\r\n+          break;\r\n+        case '14':\r\n+          viewFinalSchedule();\r\n+          break;\r\n         case '0':\r\n           print(\"Exiting. Goodbye!\");\r\n           return; // Exit the loop and method\r\n         default:\r\n@@ -447,5 +539,5 @@\n \r\n void main() {\r\n   var schedulerApp = TimetableScheduler();\r\n   schedulerApp.mainMenu();\r\n-}\n\\ No newline at end of file\n+}\r\n"
                }
            ],
            "date": 1747021846314,
            "name": "Commit-0",
            "content": "import 'dart:io';\r\n\r\n// --- DATA STRUCTURES ---\r\n\r\nclass Student {\r\n  int id;\r\n  String name;\r\n\r\n  Student(this.id, this.name);\r\n\r\n  @override\r\n  String toString() => \"ID: $id, Name: $name\";\r\n}\r\n\r\nclass Instructor {\r\n  int id;\r\n  String name;\r\n\r\n  Instructor(this.id, this.name);\r\n\r\n  @override\r\n  String toString() => \"ID: $id, Name: $name\";\r\n}\r\n\r\n// Represents the general course, e.g., \"CS101\"\r\nclass Course {\r\n  int id;\r\n  String name;\r\n\r\n  Course(this.id, this.name);\r\n\r\n  @override\r\n  String toString() => \"ID: $id, Name: $name\";\r\n}\r\n\r\nclass Classroom {\r\n  int id;\r\n  String name;\r\n  int capacity;\r\n\r\n  Classroom(this.id, this.name, this.capacity);\r\n\r\n  @override\r\n  String toString() => \"ID: $id, Name: $name, Capacity: $capacity\";\r\n}\r\n\r\n// This is what we actually try to schedule\r\nclass SubjectOffering {\r\n  int id;\r\n  Course course;\r\n  Instructor instructor;\r\n  List<Student> studentsEnrolled;\r\n\r\n  SubjectOffering(this.id, this.course, this.instructor, this.studentsEnrolled);\r\n\r\n  @override\r\n  String toString() {\r\n    var studentNames = studentsEnrolled.map((s) => s.name).join(', ');\r\n    if (studentNames.isEmpty) studentNames = \"None\";\r\n    return \"Offering ID: $id, Course: ${course.name}, Instructor: ${instructor.name}, Students: $studentNames\";\r\n  }\r\n}\r\n\r\nclass ScheduledClass {\r\n  int offeringId;\r\n  String courseName;\r\n  String instructorName;\r\n  List<String> studentNames;\r\n  String classroomName;\r\n  String timeslot;\r\n\r\n  ScheduledClass(this.offeringId, this.courseName, this.instructorName,\r\n      this.studentNames, this.classroomName, this.timeslot);\r\n\r\n  @override\r\n  String toString() {\r\n    return \"\"\"\r\n  Offering ID: $offeringId\r\n    Course:     $courseName\r\n    Instructor: $instructorName\r\n    Classroom:  $classroomName\r\n    Timeslot:   $timeslot\r\n    Students:   ${studentNames.join(', ')}\r\n    --------------------\"\"\";\r\n  }\r\n}\r\n\r\nclass TimetableScheduler {\r\n  final List<Student> _students = [];\r\n  final List<Instructor> _instructors = [];\r\n  final List<Course> _courses = [];\r\n  final List<Classroom> _classrooms = [];\r\n  final List<String> _timeslots = [];\r\n\r\n  final List<SubjectOffering> _subjectOfferingsToSchedule = [];\r\n  List<ScheduledClass> _finalSchedule = []; // Modifiable\r\n\r\n  int _nextStudentId = 1;\r\n  int _nextInstructorId = 1;\r\n  int _nextCourseId = 1;\r\n  int _nextClassroomId = 1;\r\n  int _nextOfferingId = 1;\r\n\r\n  // --- Helper Methods ---\r\n  String _prompt(String message) {\r\n    stdout.write(message);\r\n    return stdin.readLineSync() ?? \"\";\r\n  }\r\n\r\n  int _generateIdFor(String type) {\r\n    switch (type) {\r\n      case 'student':\r\n        return _nextStudentId++;\r\n      case 'instructor':\r\n        return _nextInstructorId++;\r\n      case 'course':\r\n        return _nextCourseId++;\r\n      case 'classroom':\r\n        return _nextClassroomId++;\r\n      case 'offering':\r\n        return _nextOfferingId++;\r\n      default:\r\n        throw ArgumentError(\"Unknown type for ID generation: $type\");\r\n    }\r\n  }\r\n\r\n  T? _findById<T extends dynamic>(List<T> collection, int id) {\r\n    // Assuming items in collection have an 'id' property\r\n    try {\r\n      return collection.firstWhere((item) => item.id == id);\r\n    } catch (e) {\r\n      return null; // Not found\r\n    }\r\n  }\r\n\r\n  void _displayList<T>(List<T> items, String title, String Function(T) formatter) {\r\n    print(\"\\n--- $title ---\");\r\n    if (items.isEmpty) {\r\n      print(\"No ${title.toLowerCase()} available.\");\r\n    } else {\r\n      items.asMap().forEach((index, item) {\r\n        // Using item.id if available, otherwise index\r\n        String prefix = \"\";\r\n        try {\r\n          prefix = \"${(item as dynamic).id}. \";\r\n        } catch (e) {\r\n          prefix = \"${index + 1}. \";\r\n        }\r\n        print(prefix + formatter(item));\r\n      });\r\n    }\r\n    print(\"-------------------\");\r\n  }\r\n\r\n\r\n  // --- Add Methods ---\r\n  void addStudent() {\r\n    String name = _prompt(\"Enter student name: \");\r\n    if (name.isEmpty) {\r\n      print(\"Student name cannot be empty.\");\r\n      return;\r\n    }\r\n    var student = Student(_generateIdFor('student'), name);\r\n    _students.add(student);\r\n    print(\"Student '${student.name}' (ID: ${student.id}) added.\");\r\n  }\r\n\r\n  void addInstructor() {\r\n    String name = _prompt(\"Enter instructor name: \");\r\n     if (name.isEmpty) {\r\n      print(\"Instructor name cannot be empty.\");\r\n      return;\r\n    }\r\n    var instructor = Instructor(_generateIdFor('instructor'), name);\r\n    _instructors.add(instructor);\r\n    print(\"Instructor '${instructor.name}' (ID: ${instructor.id}) added.\");\r\n  }\r\n\r\n  void addCourse() {\r\n    String name = _prompt(\"Enter course name (e.g., CS101 - Intro to Programming): \");\r\n     if (name.isEmpty) {\r\n      print(\"Course name cannot be empty.\");\r\n      return;\r\n    }\r\n    var course = Course(_generateIdFor('course'), name);\r\n    _courses.add(course);\r\n    print(\"Course '${course.name}' (ID: ${course.id}) added.\");\r\n  }\r\n\r\n  void addClassroom() {\r\n    String name = _prompt(\"Enter classroom name (e.g., Room A101): \");\r\n    if (name.isEmpty) {\r\n      print(\"Classroom name cannot be empty.\");\r\n      return;\r\n    }\r\n    String capacityStr = _prompt(\"Enter classroom capacity: \");\r\n    int? capacity = int.tryParse(capacityStr);\r\n    if (capacity == null || capacity <= 0) {\r\n      print(\"Invalid capacity. Please enter a positive number.\");\r\n      return;\r\n    }\r\n    var classroom = Classroom(_generateIdFor('classroom'), name, capacity);\r\n    _classrooms.add(classroom);\r\n    print(\"Classroom '${classroom.name}' (Capacity: ${classroom.capacity}, ID: ${classroom.id}) added.\");\r\n  }\r\n\r\n  void addTimeslot() {\r\n    String timeslotStr = _prompt(\"Enter timeslot (e.g., Mon 09:00-10:00): \");\r\n    if (timeslotStr.isEmpty) {\r\n      print(\"Timeslot cannot be empty.\");\r\n      return;\r\n    }\r\n    if (_timeslots.contains(timeslotStr)) {\r\n      print(\"Timeslot already exists.\");\r\n    } else {\r\n      _timeslots.add(timeslotStr);\r\n      print(\"Timeslot '$timeslotStr' added.\");\r\n    }\r\n  }\r\n\r\n  void addSubjectOfferingToSchedule() {\r\n    if (_courses.isEmpty) {\r\n      print(\"Please add courses first.\");\r\n      return;\r\n    }\r\n    if (_instructors.isEmpty) {\r\n      print(\"Please add instructors first.\");\r\n      return;\r\n    }\r\n\r\n    _displayList(_courses, \"Available Courses\", (c) => c.name);\r\n    String courseIdStr = _prompt(\"Enter Course ID to offer: \");\r\n    int? courseId = int.tryParse(courseIdStr);\r\n    Course? course = courseId != null ? _findById(_courses, courseId) : null;\r\n    if (course == null) {\r\n      print(\"Invalid Course ID.\");\r\n      return;\r\n    }\r\n\r\n    _displayList(_instructors, \"Available Instructors\", (i) => i.name);\r\n    String instructorIdStr = _prompt(\"Enter Instructor ID for this offering: \");\r\n    int? instructorId = int.tryParse(instructorIdStr);\r\n    Instructor? instructor = instructorId != null ? _findById(_instructors, instructorId) : null;\r\n    if (instructor == null) {\r\n      print(\"Invalid Instructor ID.\");\r\n      return;\r\n    }\r\n\r\n    List<Student> enrolledStudentsList = [];\r\n    if (_students.isNotEmpty) {\r\n      while (true) {\r\n        _displayList(_students, \"Available Students\", (s) => s.name);\r\n        _displayList(enrolledStudentsList, \"Currently Enrolled for this Offering\", (s) => s.name);\r\n        String studentInput = _prompt(\"Enter Student ID to enroll (or type 'done'): \");\r\n        if (studentInput.toLowerCase() == 'done') break;\r\n\r\n        int? studentId = int.tryParse(studentInput);\r\n        Student? student = studentId != null ? _findById(_students, studentId) : null;\r\n\r\n        if (student != null && !enrolledStudentsList.contains(student)) {\r\n          enrolledStudentsList.add(student);\r\n          print(\"${student.name} added to this offering.\");\r\n        } else if (enrolledStudentsList.contains(student)) {\r\n          print(\"${student?.name} is already added.\");\r\n        } else {\r\n          print(\"Invalid Student ID.\");\r\n        }\r\n      }\r\n    } else {\r\n      print(\"No students available to enroll. Offering will have 0 students for now.\");\r\n    }\r\n\r\n    var offering = SubjectOffering(\r\n        _generateIdFor('offering'), course, instructor, enrolledStudentsList);\r\n    _subjectOfferingsToSchedule.add(offering);\r\n    print(\r\n        \"Subject Offering '${course.name}' by '${instructor.name}' (ID: ${offering.id}) added to scheduling queue.\");\r\n  }\r\n\r\n  // --- View Methods ---\r\n  void viewStudents() => _displayList(_students, \"Students\", (s) => s.name);\r\n  void viewInstructors() => _displayList(_instructors, \"Instructors\", (i) => i.name);\r\n  void viewCourses() => _displayList(_courses, \"Courses\", (c) => c.name);\r\n  void viewClassrooms() => _displayList(_classrooms, \"Classrooms\", (c) => \"${c.name} (Capacity: ${c.capacity})\");\r\n  void viewTimeslots() => _displayList(_timeslots, \"Available Timeslots\", (ts) => ts);\r\n\r\n  void viewOfferingsToSchedule() {\r\n    _displayList(_subjectOfferingsToSchedule, \"Offerings Queued for Scheduling\", (offering) {\r\n      var studentNames = offering.studentsEnrolled.map((s) => s.name).join(', ');\r\n      studentNames = studentNames.isEmpty ? \"None\" : studentNames;\r\n      return \"${offering.course.name} - Instructor: ${offering.instructor.name} - Students: $studentNames\";\r\n    });\r\n  }\r\n\r\n  void viewFinalSchedule() {\r\n    print(\"\\n--- FINAL SCHEDULE ---\");\r\n    if (_finalSchedule.isEmpty) {\r\n      print(\"No classes have been scheduled yet, or scheduling failed.\");\r\n    } else {\r\n      _finalSchedule.forEach(print); // Uses ScheduledClass.toString()\r\n    }\r\n    print(\"--------------------\");\r\n  }\r\n\r\n  // --- Scheduling Logic ---\r\n  String? _checkForConflicts(SubjectOffering offeringToCheck, Classroom classroom, String timeslot) {\r\n    // 1. Classroom availability\r\n    if (_finalSchedule.any((sc) => sc.classroomName == classroom.name && sc.timeslot == timeslot)) {\r\n      return \"Conflict: Classroom ${classroom.name} busy at $timeslot.\";\r\n    }\r\n\r\n    // 2. Instructor availability\r\n    if (_finalSchedule.any((sc) => sc.instructorName == offeringToCheck.instructor.name && sc.timeslot == timeslot)) {\r\n      return \"Conflict: Instructor ${offeringToCheck.instructor.name} busy at $timeslot.\";\r\n    }\r\n\r\n    // 3. Student availability\r\n    for (var student in offeringToCheck.studentsEnrolled) {\r\n      if (_finalSchedule.any((sc) => sc.studentNames.contains(student.name) && sc.timeslot == timeslot)) {\r\n        return \"Conflict: Student ${student.name} busy at $timeslot.\";\r\n      }\r\n    }\r\n\r\n    // 4. Classroom capacity\r\n    if (offeringToCheck.studentsEnrolled.length > classroom.capacity) {\r\n      return \"Conflict: Classroom ${classroom.name} capacity (${classroom.capacity}) too small for ${offeringToCheck.studentsEnrolled.length} students.\";\r\n    }\r\n    \r\n    // 5. Offering ID already scheduled (should not happen if logic is correct elsewhere but good check)\r\n    if (_finalSchedule.any((sc) => sc.offeringId == offeringToCheck.id)) {\r\n        return \"Error: Offering ID ${offeringToCheck.id} is somehow already in the final schedule.\";\r\n    }\r\n\r\n    return null; // No conflicts\r\n  }\r\n\r\n  void runScheduler() {\r\n    if (_subjectOfferingsToSchedule.isEmpty) {\r\n      print(\"No subject offerings in the queue to schedule. Please add some first.\");\r\n      return;\r\n    }\r\n    if (_classrooms.isEmpty) {\r\n      print(\"No classrooms available. Please add classrooms first.\");\r\n      return;\r\n    }\r\n    if (_timeslots.isEmpty) {\r\n      print(\"No timeslots available. Please add timeslots first.\");\r\n      return;\r\n    }\r\n\r\n    print(\"\\n--- Running Scheduler ---\");\r\n    _finalSchedule.clear(); // Clear previous schedule\r\n\r\n    Set<int> processedOfferingIds = {}; // To avoid processing the same offering multiple times\r\n\r\n    for (var currentOffering in _subjectOfferingsToSchedule) {\r\n      if (processedOfferingIds.contains(currentOffering.id)) {\r\n        print(\"Skipping already processed offering ID: ${currentOffering.id}\");\r\n        continue;\r\n      }\r\n\r\n      print(\"\\nAttempting to schedule: ${currentOffering.course.name} (Instructor: ${currentOffering.instructor.name}, Offering ID: ${currentOffering.id})\");\r\n      bool scheduledThisOffering = false;\r\n\r\n      for (var classroom in _classrooms) {\r\n        for (var timeslot in _timeslots) {\r\n          String? conflictReason = _checkForConflicts(currentOffering, classroom, timeslot);\r\n\r\n          if (conflictReason != null) {\r\n            // print(\"    $conflictReason\"); // Verbose logging for debugging\r\n            continue;\r\n          } else {\r\n            var newScheduledClass = ScheduledClass(\r\n              currentOffering.id,\r\n              currentOffering.course.name,\r\n              currentOffering.instructor.name,\r\n              currentOffering.studentsEnrolled.map((s) => s.name).toList(),\r\n              classroom.name,\r\n              timeslot,\r\n            );\r\n            _finalSchedule.add(newScheduledClass);\r\n            scheduledThisOffering = true;\r\n            processedOfferingIds.add(currentOffering.id);\r\n            print(\"  SUCCESS: Scheduled ${currentOffering.course.name} in ${classroom.name} at $timeslot\");\r\n            break; // Break from TIMESLOTS loop\r\n          }\r\n        } // End TIMESLOTS loop\r\n        if (scheduledThisOffering) break; // Break from CLASSROOMS loop\r\n      } // End CLASSROOMS loop\r\n\r\n      if (!scheduledThisOffering) {\r\n        print(\"  FAILURE: Could not find a suitable slot for ${currentOffering.course.name} (ID: ${currentOffering.id}).\");\r\n      }\r\n    }\r\n    print(\"--- Scheduler Finished ---\");\r\n    viewFinalSchedule();\r\n  }\r\n\r\n  // --- Main Menu ---\r\n  void mainMenu() {\r\n    while (true) {\r\n      print(\"\\n===== Timetable Scheduler Menu (Dart) =====\");\r\n      print(\"1. Add Student\");\r\n      print(\"2. Add Instructor\");\r\n      print(\"3. Add Course (e.g., Math 101)\");\r\n      print(\"4. Add Classroom\");\r\n      print(\"5. Add Timeslot\");\r\n      print(\"6. Create Subject Offering (to be scheduled)\");\r\n      print(\"------------------------------------\");\r\n      print(\"7. View Students\");\r\n      print(\"8. View Instructors\");\r\n      print(\"9. View Courses\");\r\n      print(\"10. View Classrooms\");\r\n      print(\"11. View Timeslots\");\r\n      print(\"12. View Offerings Queued for Scheduling\");\r\n      print(\"------------------------------------\");\r\n      print(\"13. RUN SCHEDULER\");\r\n      print(\"14. View Final Schedule\");\r\n      print(\"------------------------------------\");\r\n      print(\"0. Exit\");\r\n      String choice = _prompt(\"Enter your choice: \");\r\n\r\n      switch (choice) {\r\n        case '1': addStudent(); break;\r\n        case '2': addInstructor(); break;\r\n        case '3': addCourse(); break;\r\n        case '4': addClassroom(); break;\r\n        case '5': addTimeslot(); break;\r\n        case '6': addSubjectOfferingToSchedule(); break;\r\n        case '7': viewStudents(); break;\r\n        case '8': viewInstructors(); break;\r\n        case '9': viewCourses(); break;\r\n        case '10': viewClassrooms(); break;\r\n        case '11': viewTimeslots(); break;\r\n        case '12': viewOfferingsToSchedule(); break;\r\n        case '13': runScheduler(); break;\r\n        case '14': viewFinalSchedule(); break;\r\n        case '0':\r\n          print(\"Exiting. Goodbye!\");\r\n          return; // Exit the loop and method\r\n        default:\r\n          print(\"Invalid choice. Please try again.\");\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nvoid main() {\r\n  var schedulerApp = TimetableScheduler();\r\n  schedulerApp.mainMenu();\r\n}"
        }
    ]
}