{
    "sourceFile": "sched_script",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1747018818200,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1747018818200,
            "name": "Commit-0",
            "content": "# --- DATA STRUCTURES ---\r\n# Using Structs for simplicity to represent our entities.\r\n# In a real app, these might be full classes or database models.\r\n\r\nStudent = Struct.new(:id, :name)\r\nInstructor = Struct.new(:id, :name)\r\nSubject = Struct.new(:id, :name, :instructor, :students_to_enroll) # instructor and students are pre-associated\r\nClassroom = Struct.new(:id, :name, :capacity)\r\nScheduledClass = Struct.new(:subject_name, :instructor_name, :student_names, :classroom_name, :timeslot)\r\n\r\n# --- SAMPLE DATA ---\r\n\r\n# Available Timeslots\r\nTIMESLOTS = [\r\n  \"Mon 09:00-10:00\", \"Mon 10:00-11:00\", \"Mon 11:00-12:00\",\r\n  \"Tue 09:00-10:00\", \"Tue 10:00-11:00\", \"Tue 11:00-12:00\",\r\n  \"Wed 09:00-10:00\", \"Wed 10:00-11:00\", \"Wed 11:00-12:00\"\r\n]\r\n\r\n# Available Classrooms\r\nCLASSROOMS = [\r\n  Classroom.new(1, \"Room A101\", 30),\r\n  Classroom.new(2, \"Room B203\", 25),\r\n  Classroom.new(3, \"Lab C301\", 20)\r\n]\r\n\r\n# Instructors\r\ninstructor_ada = Instructor.new(10, \"Prof. Ada Lovelace\")\r\ninstructor_alan = Instructor.new(11, \"Dr. Alan Turing\")\r\n\r\n# Students\r\nstudent_bob = Student.new(100, \"Bob\")\r\nstudent_alice = Student.new(101, \"Alice\")\r\nstudent_charlie = Student.new(102, \"Charlie\")\r\nstudent_dave = Student.new(103, \"Dave\")\r\nstudent_eve = Student.new(104, \"Eve\")\r\n\r\n# Subjects to be scheduled (Input for the system)\r\n# This corresponds to the \"Input student, Instructor, subjects, classroom\" part,\r\n# though classroom is found dynamically.\r\nSUBJECTS_TO_SCHEDULE = [\r\n  Subject.new(\"CS101\", \"Intro to CS\", instructor_ada, [student_bob, student_alice, student_charlie]),\r\n  Subject.new(\"AI202\", \"AI Fundamentals\", instructor_alan, [student_alice, student_dave, student_eve]),\r\n  Subject.new(\"MA101\", \"Calculus I\", instructor_ada, [student_bob, student_dave]),\r\n  Subject.new(\"CS101_Evening\", \"Intro to CS (Evening)\", instructor_alan, [student_eve]) # Different offering\r\n]\r\n\r\n# --- SCHEDULING LOGIC ---\r\n\r\n# This will store the final schedule\r\n$final_schedule = [] # Using a global for simplicity in helper functions, not best practice for large apps\r\n\r\n# Helper function to check for conflicts\r\ndef check_for_conflicts(subject_to_check, classroom, timeslot)\r\n  # 1. Classroom availability\r\n  if $final_schedule.any? { |sc| sc.classroom_name == classroom.name && sc.timeslot == timeslot }\r\n    # puts \"Conflict: Classroom #{classroom.name} is busy at #{timeslot}.\"\r\n    return true\r\n  end\r\n\r\n  # 2. Instructor availability\r\n  if $final_schedule.any? { |sc| sc.instructor_name == subject_to_check.instructor.name && sc.timeslot == timeslot }\r\n    # puts \"Conflict: Instructor #{subject_to_check.instructor.name} is busy at #{timeslot}.\"\r\n    return true\r\n  end\r\n\r\n  # 3. Student availability\r\n  subject_to_check.students_to_enroll.each do |student|\r\n    if $final_schedule.any? { |sc| sc.student_names.include?(student.name) && sc.timeslot == timeslot }\r\n      # puts \"Conflict: Student #{student.name} is busy at #{timeslot}.\"\r\n      return true\r\n    end\r\n  end\r\n\r\n  # 4. Subject duplication (is this specific subject offering already scheduled?)\r\n  # This prevents scheduling the same subject (e.g., CS101 by Prof. Ada) multiple times\r\n  # unless it's explicitly a different offering (e.g., CS101_Evening).\r\n  if $final_schedule.any? { |sc| sc.subject_name == subject_to_check.name && sc.instructor_name == subject_to_check.instructor.name }\r\n    # This check might be too broad if a course can have multiple sections by the same prof.\r\n    # For this example, we assume one instance per subject_name + instructor_name combination.\r\n    # If we are iterating through SUBJECTS_TO_SCHEDULE and removing/marking as scheduled,\r\n    # this specific check might become redundant for the *current* subject,\r\n    # but it's good for overall integrity.\r\n    # Let's refine: this is more about not adding duplicates to final_schedule if this subject was already processed and added.\r\n    # The flowchart's \"Subject duplication\" is a bit vague.\r\n    # If we process each item in SUBJECTS_TO_SCHEDULE once, this check as implemented\r\n    # would prevent a subject being scheduled if it's already there.\r\n    # This might be better handled by ensuring each subject from the input list is processed once.\r\n    # Let's assume the input `SUBJECTS_TO_SCHEDULE` are unique desired offerings.\r\n  end\r\n\r\n  # Check classroom capacity (not explicitly in flowchart's conflict list, but essential)\r\n  if subject_to_check.students_to_enroll.size > classroom.capacity\r\n    # puts \"Conflict: Classroom #{classroom.name} capacity (#{classroom.capacity}) too small for #{subject_to_check.students_to_enroll.size} students.\"\r\n    return true\r\n  end\r\n\r\n  false # No conflicts\r\nend\r\n\r\n# --- MAIN EXECUTION (Simulating the flowchart) ---\r\n\r\nputs \"Starting Scheduler...\"\r\nputs \"Input Subjects to Schedule: #{SUBJECTS_TO_SCHEDULE.map(&:name).join(', ')}\"\r\nputs \"---\"\r\n\r\n# \"Loop through each subjects\"\r\nSUBJECTS_TO_SCHEDULE.each_with_index do |current_subject, index|\r\n  puts \"\\nAttempting to schedule: #{current_subject.name} (Instructor: #{current_subject.instructor.name}, Students: #{current_subject.students_to_enroll.map(&:name).join(', ')})\"\r\n  \r\n  # \"Is there available subject?\" - Implicitly yes, as we are looping through them.\r\n  # The purple boxes \"Assign Instructor to Subject\" and \"Assign Students to Subject\"\r\n  # are assumed to be done when `current_subject` was defined.\r\n\r\n  scheduled_this_subject = false\r\n\r\n  # \"Find Available Classroom & Timeslot\"\r\n  CLASSROOMS.each do |classroom|\r\n    TIMESLOTS.each do |timeslot|\r\n      # \"Check for Conflicts\"\r\n      puts \"  Trying Classroom: #{classroom.name}, Timeslot: #{timeslot}\"\r\n      is_conflict = check_for_conflicts(current_subject, classroom, timeslot)\r\n\r\n      # \"Is there conflicts?\"\r\n      if is_conflict\r\n        # \"Yes\" -> \"Try next Timeslot or Classroom\" (handled by the loops)\r\n        # puts \"    Conflict found. Trying next...\"\r\n        next # Try next timeslot\r\n      else\r\n        # \"No\" -> \"Assign students and instructor\" (meaning, finalize this scheduling)\r\n        # The flowchart phrasing is a bit off; students/instructor are already part of the subject.\r\n        # This means \"Schedule this subject in this classroom/timeslot.\"\r\n        new_scheduled_class = ScheduledClass.new(\r\n          current_subject.name,\r\n          current_subject.instructor.name,\r\n          current_subject.students_to_enroll.map(&:name), # Store names for simplicity\r\n          classroom.name,\r\n          timeslot\r\n        )\r\n        $final_schedule << new_scheduled_class\r\n        scheduled_this_subject = true\r\n        puts \"    SUCCESS: Scheduled #{current_subject.name} in #{classroom.name} at #{timeslot}\"\r\n        break # Break from TIMESLOTS loop, subject is scheduled\r\n      end\r\n    end # End TIMESLOTS loop\r\n\r\n    if scheduled_this_subject\r\n      break # Break from CLASSROOMS loop, subject is scheduled\r\n    end\r\n  end # End CLASSROOMS loop\r\n\r\n  unless scheduled_this_subject\r\n    puts \"    FAILURE: Could not find a suitable slot for #{current_subject.name}.\"\r\n  end\r\n\r\n  # \"Add another subject?\" (diamond)\r\n  # This is implicitly handled by the main `SUBJECTS_TO_SCHEDULE.each` loop.\r\n  # If \"Yes\", the loop continues to the next subject.\r\n  # If \"No\" (i.e., loop finishes), we proceed to \"Schedule Complete\".\r\nend\r\n\r\nputs \"\\n---\"\r\nputs \"Schedule Complete.\"\r\nputs \"---\"\r\n\r\nif $final_schedule.empty?\r\n  puts \"No classes were scheduled.\"\r\nelse\r\n  puts \"Final Schedule:\"\r\n  $final_schedule.each do |sc|\r\n    puts \"  Subject: #{sc.subject_name}\"\r\n    puts \"    Instructor: #{sc.instructor_name}\"\r\n    puts \"    Classroom:  #{sc.classroom_name}\"\r\n    puts \"    Timeslot:   #{sc.timeslot}\"\r\n    puts \"    Students:   #{sc.student_names.join(', ')}\"\r\n    puts \"    ----------\"\r\n  end\r\nend\r\n\r\nputs \"\\nEnd.\""
        }
    ]
}